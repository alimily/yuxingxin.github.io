<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宇信同行</title>
  <icon>https://www.gravatar.com/avatar/3ec75c9ca272d7160ff5a3c1b9bc0907</icon>
  <subtitle>Just Keep Sharing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuxingxin.com/"/>
  <updated>2018-01-10T08:32:03.000Z</updated>
  <id>https://yuxingxin.com/</id>
  
  <author>
    <name>Sean Liu</name>
    <email>lx8909@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于fastlane已存在的证书复用问题</title>
    <link href="https://yuxingxin.com/2018/01/10/FastlaneReuseCerts/"/>
    <id>https://yuxingxin.com/2018/01/10/FastlaneReuseCerts/</id>
    <published>2018-01-09T16:00:00.000Z</published>
    <updated>2018-01-10T08:32:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>iOS开发在团队项目协作中，面临着许许多的挑战，除了被大家诟病的nib文件和故事板以外，还有就是今天要说的证书管理问题，相信做过iOS开发的用户对fastlane已经不陌生了，它提供了很多有用的功能来帮助开发者从繁琐的重复性劳动中解脱出来，这里列举出一些：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fnbcmq6spkj30to0sbtag.jpg" alt=""></p><ul><li>deliver: 上传截图, 元数据, app应用程序到App Store</li><li>supply: 上传Android app应用程序和元数据到Google Play</li><li>snapshot: 自动捕获iOS app应用程序本地截图</li><li>screengrab: 自动捕获Android app应用程序本地截图</li><li>frameit: 快速截屏并将截屏放入设备中</li><li>pem: 自动生成和更新推送通知配置文件</li><li>sigh: 开发证书和描述文件下载</li><li>produce: 使用命令行在iTunes Connect上创建新的app和开发入口</li><li>cert: 自动创建和配置iOS代码签名证书</li><li>spaceship: Ruby 库访问 Apple开发者中心和 iTunes Connect</li><li>pilot: 最好的方式管理你的TestFlight 测试人员和从终端构建</li><li>boarding: 最简单的方式邀请你的TestFlight beta测试人员</li><li>gym: iOS app打包签名自动化工具</li><li>match: 使用Git同步你的团队证书和配置文件</li><li>scan: 最简单方式测试你的 iOS 和 Mac apps</li></ul><p>今天说的其实是match，我们知道，苹果公司在个人开发者账号上面对于证书的生成是有严格的数量限制的，<code>development</code> 和 <code>distribution</code>证书类型只能生成2个，所以如果按照fastlane每次build不同的target或者不同的Bundle ID的话，它都会重新去生成一个新的证书并以此生成对应的描述文件，这样以来，我们也只能最多同时用该开发者账号签名两个App安装在真机上，想用第三个就必须revoke掉以前生成的证书，当然了，一旦把证书revoke掉了，这也就意味着我们用该证书签名的App也不能在真机上面使用了。所以就得考虑一下，该如果复用现有证书。</p><h4 id="1-拿到你想要复用证书的ID"><a href="#1-拿到你想要复用证书的ID" class="headerlink" title="1. 拿到你想要复用证书的ID"></a>1. 拿到你想要复用证书的ID</h4><p>关于这个证书ID，从钥匙串和openssl工具库中没有找到方法来取到，但是可以通过spaceship这个库来实现，下面是相关脚本：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'spaceship'</span></span><br><span class="line">Spaceship.login(<span class="string">'your@apple.id'</span>)</span><br><span class="line">Spaceship.select_team</span><br><span class="line">Spaceship.certificate.all.each <span class="keyword">do</span> <span class="params">|cert|</span> </span><br><span class="line">  cert_type = Spaceship::Portal::Certificate::CERTIFICATE_TYPE_IDS[cert.type_display_id].to_s.split(<span class="string">"::"</span>)[-<span class="number">1</span>]</span><br><span class="line">  puts <span class="string">"Cert id: <span class="subst">#&#123;cert.id&#125;</span>, name: <span class="subst">#&#123;cert.name&#125;</span>, expires: <span class="subst">#&#123;cert.expires.strftime(<span class="string">"%Y-%m-%d"</span>)&#125;</span>, type: <span class="subst">#&#123;cert_type&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>执行上面代码，会输出所有证书的相应信息，你可以从中找到你想复用的那个证书的ID。</p><h4 id="2-创建远程仓库来保存证书。"><a href="#2-创建远程仓库来保存证书。" class="headerlink" title="2. 创建远程仓库来保存证书。"></a>2. 创建远程仓库来保存证书。</h4><p>建立一个远程仓库，并在该目录下创建<code>certs/distribution</code>和 <code>certs/development</code>目录，分别存放生产和开发环境下的相关证书文件。</p><h4 id="3-通过钥匙串导出你想要复用的那个证书"><a href="#3-通过钥匙串导出你想要复用的那个证书" class="headerlink" title="3. 通过钥匙串导出你想要复用的那个证书"></a>3. 通过钥匙串导出你想要复用的那个证书</h4><p>导出对应的cer文件和p12文件。</p><h4 id="4-执行下面命令，导出私钥文件"><a href="#4-执行下面命令，导出私钥文件" class="headerlink" title="4. 执行下面命令，导出私钥文件"></a>4. 执行下面命令，导出私钥文件</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -nocerts -nodes -out key<span class="selector-class">.pem</span> -<span class="keyword">in</span> certificate.p12</span><br></pre></td></tr></table></figure><h4 id="5-生成最后需要的证书"><a href="#5-生成最后需要的证书" class="headerlink" title="5. 生成最后需要的证书"></a>5. 生成最后需要的证书</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl aes-<span class="number">256</span>-cbc -k &lt;your_password&gt; -<span class="keyword">in</span> key<span class="selector-class">.pem</span> -out &lt;cert_id&gt;<span class="selector-class">.p12</span> -a</span><br><span class="line">openssl aes-<span class="number">256</span>-cbc -k &lt;your_password&gt; -<span class="keyword">in</span> certificate<span class="selector-class">.cer</span> -out &lt;cert_id&gt;<span class="selector-class">.cer</span> -a</span><br></pre></td></tr></table></figure><p>这里的cert_id是上面我们保存的证书id，其中执行完上述步骤后，就生成了fastlane match想要的证书，当执行fastlane match development/adhoc/appstore命令后，match就不会在Apple Development Center重新生成证书了，而是用现有的。<br>将证书分别放到对应的git仓库目录中，提交并推送到远程仓库。</p><h4 id="6-在开发者网站上面生成App-ID"><a href="#6-在开发者网站上面生成App-ID" class="headerlink" title="6. 在开发者网站上面生成App ID"></a>6. 在开发者网站上面生成App ID</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane produce -u &lt;your@apple.<span class="built_in">id</span>&gt; -a &lt;your_app_bundle_id&gt; <span class="comment">--skip_itc</span></span><br></pre></td></tr></table></figure><p>如果你的App需要在ITC（iTunes Connect）中创建，则移除<code>--skip_itc</code>选项。</p><h4 id="7-生成证书对应的描述文件"><a href="#7-生成证书对应的描述文件" class="headerlink" title="7. 生成证书对应的描述文件"></a>7. 生成证书对应的描述文件</h4><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane <span class="keyword">match</span> &lt;<span class="class"><span class="keyword">type</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中type有四种：development/adhoc/distribution/appstore</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://macoscope.com/blog/simplify-your-life-with-fastlane-match/" target="_blank" rel="external">Simplify your life with fastlane match</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;iOS开发在团队项目协作中，面临着许许多的挑战，除了被大家诟病的nib文件和故事板以外，还有就是今天要说的证书管理问题，相信做过iOS开发的
      
    
    </summary>
    
      <category term="iOS" scheme="https://yuxingxin.com/categories/iOS/"/>
    
    
      <category term="fastlane" scheme="https://yuxingxin.com/tags/fastlane/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 和Gradle Plugin 3.0 迁移不完全指南</title>
    <link href="https://yuxingxin.com/2017/11/03/Migrate-Android-Studio-3-guide/"/>
    <id>https://yuxingxin.com/2017/11/03/Migrate-Android-Studio-3-guide/</id>
    <published>2017-11-02T16:00:00.000Z</published>
    <updated>2017-11-03T14:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio 3.0 默认Gradle版本为4.1，如果你需要手动升级版本的话，记得修改gradle/wrapper/gradle-wrapper.properties文件的URL地址：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">distributionUrl=https\<span class="symbol">://services</span>.gradle.org/distributions/gradle-<span class="number">4.1</span>-all.zip</div></pre></td></tr></table></figure><p>对应的Gradle插件版本为3.0.0，手动修改的话，需要修改项目级的build.gradle文件：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        ...</div><div class="line">        <span class="comment">// You need to add the following repository to download the</span></div><div class="line">        <span class="comment">// new plugin.</span></div><div class="line">        google()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.0.0'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意上面记得添加google这个repository，某些官方依赖需要下载</p><p>对应我们的构建工具buildToolsVersion版本为26.0.2，对应Module级项目build.gradle文件：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">26</span></div><div class="line">    ...</div><div class="line">    defaultConfig &#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>使用变体感知（variant-aware）依赖管理机制</p><p>Android 3.0的插件使用一种新的依赖机制，这种机制能自动的匹配我们项目中依赖库的变体，即app变体debug会自动消费它所依赖的library的debug变体。当然了，我们在给产品定制不同的风味时，它依然能够适用。所以呢为了保证能够准确的匹配这些变体，我们需要为所有的产品风味声明风味维度（flavor dimensions），以及不可能直接匹配的需要我们提供matching fallbacks（PS：不知道怎么翻译了…）</p><p>好了，上面说了那么多”废话”，其实只是想说明一点，如果你项目中用了build type 或者product flavor一种或一种以上， 那么你就需要注意了，这里可能需要做相应的适配：</p></li></ul><ol><li><p>添加风味维度的声明<br>当我们在配置文件中配置产品风味的时候，现在需要声明风味维度，然后在每个产品风味中指定你前面所声明的某一个风味维度，如下：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//定义两个风味维度</div><div class="line">flavorDimensions <span class="string">"api"</span>, <span class="string">"mode"</span></div><div class="line"></div><div class="line">productFlavors &#123;</div><div class="line">  demo &#123;</div><div class="line">  //指定风味维度</div><div class="line">        dimension <span class="string">"mode"</span></div><div class="line">        ...</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  full &#123;</div><div class="line">        dimension <span class="string">"mode"</span></div><div class="line">        ...</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  minApi24 &#123;</div><div class="line">         dimension <span class="string">"api"</span></div><div class="line">         minSDKVersion <span class="string">'24'</span></div><div class="line">         versionNameSuffix <span class="string">"-minApi24"</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  minApi23 &#123;</div><div class="line">  dimension <span class="string">"api"</span></div><div class="line">         minSDKVersion <span class="string">'23'</span></div><div class="line">         versionNameSuffix <span class="string">"-minApi23"</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  minApi21 &#123;</div><div class="line">  dimension <span class="string">"api"</span></div><div class="line">         minSDKVersion <span class="string">'21'</span></div><div class="line">         versionNameSuffix <span class="string">"-minApi21"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如上，配置完后，Gradle创建的构建变体数量等于每个风味维度中的风味数量与你配置的构建类型数量的乘积，在 Gradle 为每个构建变体或对应 APK 命名时，属于较高优先级风味维度的产品风味首先显示，之后是较低优先级维度的产品风味，再之后是构建类型。以上面的构建配置为例，Gradle 可以使用以下命名方案创建总共 12 个构建变体：<br>构建变体：[minApi24, minApi23, minApi21][Demo, Full][Debug, Release]<br>对应 APK：app-[minApi24, minApi23, minApi21]-[demo, full]-[debug, release].apk<br>例如构建变体：minApi24DemoDebug，对应 APK：app-minApi24-demo-debug.apk<br>当然如果有些特定的变体不是你需要的，你也可以过滤：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">android&#123;</div><div class="line">    <span class="function"><span class="title">variantFilter</span> &#123; variant -&gt;</span></div><div class="line">        def names = variant.flavors*.<span class="keyword">name</span></div><div class="line">        <span class="comment">// To check for a certain build type, use variant.buildType.name == "&lt;buildType&gt;"</span></div><div class="line">        <span class="keyword">if</span> (names.<span class="built_in">contains</span>(<span class="string">"minApi21"</span>) &amp;&amp; names.<span class="built_in">contains</span>(<span class="string">"demo"</span>)) &#123;</div><div class="line">        <span class="comment">// Gradle ignores any variants that satisfy the conditions above.</span></div><div class="line">        setIgnore(<span class="literal">true</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果组合多个产品风味，产品风味之间的优先级将由它们所属的风味维度决定。上面所列示的第一个风味维度中的产品风味比第二个维度中的产品风味拥有更高的优先级，以此类推。此外，与属于各个产品风味的源集相比，你为产品风味组合创建的源集拥有更高的优先级。</p><p>如果不同源集包含同一文件的不同版本，Gradle 将按以下优先顺序决定使用哪一个文件（左侧源集替换右侧源集的文件和设置）：</p><p>构建变体 &gt; 构建类型 &gt; 产品风味 &gt; 主源集 &gt; 库依赖项</p><p>如以下优先级顺序：</p><ol><li>src/demoDebug/（构建变体源集）</li><li>src/debug/（构建类型源集）</li><li>src/demo/（产品风味源集）</li><li>src/main/（主源集）<br>这里说下源集的概念，Android Studio 按逻辑关系将每个模块的源代码和资源分组称为源集，默认情况下，Android Studio 会创建 main/源集和目录，用于存储要在所有构建变体之间共享的一切资源。然而，我们也可以创建新的源集来控制 Gradle 要为特定的构建类型、产品风味（以及使用风味维度时的产品风味组合）和构建变体编译和打包的确切文件。例如，可以在 main/ 源集中定义基本的功能，使用产品风味源集针对不同的客户更改应用的品牌，或者仅针对使用调试构建类型的构建变体包含特殊的权限和日志记录功能等。<ul><li><code>src/main/</code>：此源集包括所有构建变体共用的代码和资源。</li><li><code>src/&lt;buildType&gt;/</code>：创建此源集可加入特定构建类型专用的代码和资源。</li><li><code>src/&lt;productFlavor&gt;/</code>：创建此源集可加入特定产品风味专用的代码和资源。</li><li><code>src/&lt;productFlavorBuildType&gt;/</code>：创建此源集可加入特定构建变体专用的代码和资源。</li></ul></li></ol><p>配置完后我们可以通过Android Studio窗口右侧Gradle，导航至YourApplication&gt;Tasks&gt;android下双击sourceSets，在Android Studio底部右下角 Gradle Console处查看项目是如何组织源集的</p></li></ol><ol><li><p>关于构建类型的配置，假设App中配置了一个叫做”jniDebug”的构建类型，但是该App所依赖的库中没有配置，这时候当我们构建”jniDebug”的时候，插件就不知道库该使用什么构建类型，这时候就会给报出下面的错误：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">Error:</span>Failed to <span class="string">resolve:</span> Could not resolve <span class="string">project :</span>mylibrary.</div><div class="line">Required <span class="string">by:</span><span class="string">project :</span>app</div></pre></td></tr></table></figure><p>这类问题就是由于上面的依赖管理机制变化导致的，我们可以下面的几种情况来分别解决：</p><ul><li><p>你的 Module App 包含了它所依赖的库没有的构建类型</p><p>例如，我们的App包含了一个jniDebug的构建类型，但是它所依赖的库中没有这个，而是有debug和release这两个构建类型，这时候我们就可以在Module App的build.gradle文件中使用matchingFallbacks 来指定可以替换的匹配项，如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    buildTypes &#123;</div><div class="line">        debug &#123;&#125;</div><div class="line">        release &#123;&#125;</div><div class="line">        jniDebug &#123;</div><div class="line">            <span class="comment">// Specifies a sorted list of fallback build types that the</span></div><div class="line">            <span class="comment">// plugin should try to use when a dependency does not include a</span></div><div class="line">            <span class="comment">// "jniDebug" build type. You may specify as many fallbacks as you</span></div><div class="line">            <span class="comment">// like, and the plugin selects the first build type that's</span></div><div class="line">            <span class="comment">// available in the dependency.</span></div><div class="line">            matchingFallbacks = ['debug', 'release']</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>值得一提的是插件会选择matchingFallbacks列表中第一个可用的构建类型来替换匹配项。</p><blockquote><p>注意当依赖的库中包含了Module App没有的构建类型，则不会出现上述问题。</p></blockquote></li><li><p>对于一个给定的存在于App和它所依赖的库中的风味维度，我们的主Module App包含了库中没有的风味：</p><p>例如，主Module App和库中都包含了一个mode的风味维度，我们的App中指定mode维度的是free和paid风味，而库中指定mode维度的是demo和paid风味，这时候我们就可以用`matchingFallbacks 来为App中的free指定可以替换的匹配项。如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">          defaultConfig&#123;</div><div class="line">          <span class="comment">// Do not configure matchingFallbacks in the defaultConfig block.</span></div><div class="line">          <span class="comment">// Instead, you must specify fallbacks for a given product flavor in the</span></div><div class="line">          <span class="comment">// productFlavors block, as shown below.</span></div><div class="line">        &#125;</div><div class="line">          flavorDimensions 'mode'</div><div class="line">          productFlavors &#123;</div><div class="line">              paid &#123;</div><div class="line">                  dimension 'mode'</div><div class="line">                  <span class="comment">// Because the dependency already includes a "paid" flavor in its</span></div><div class="line">                  <span class="comment">// "mode" dimension, you don't need to provide a list of fallbacks</span></div><div class="line">                  <span class="comment">// for the "paid" flavor.</span></div><div class="line">              &#125;</div><div class="line">              free &#123;</div><div class="line">                  dimension 'mode'</div><div class="line">                  <span class="comment">// Specifies a sorted list of fallback flavors that the plugin</span></div><div class="line">                  <span class="comment">// should try to use when a dependency's matching dimension does</span></div><div class="line">                  <span class="comment">// not include a "free" flavor. You may specify as many</span></div><div class="line">                  <span class="comment">// fallbacks as you like, and the plugin selects the first flavor</span></div><div class="line">                  <span class="comment">// that's available in the dependency's "mode" dimension.</span></div><div class="line">                  matchingFallbacks = ['demo', 'trial']</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure><p>值得注意的是，上述情况中，如果说库中包含了一个主Module App没有的产品风味，则不会出现上述问题。</p></li><li><p>库中包含了一个主Module App没有的风味维度</p><p>例如，库中声明了一个minApi的风味维度，但是你的App中只有mode维度，因此当你要构建freeDebug这个变种版本的App时，插件就不知道你是想用minApi23Debug还是用minApi25Debug变种版本的库，这时候我们可以在主Module App中的defaultConfig代码块通过配置missingDimensionStrategy来让插件从丢失的维度中指定默认的风味，当然你也可以在productFlavors代码块中覆盖先前的选择，因此每一个风味都可以为丢失的维度指定一个不同的匹配策略。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">defaultConfig&#123;</div><div class="line">          <span class="comment">// Specifies a sorted list of flavors that the plugin should try to use from</span></div><div class="line">          <span class="comment">// a given dimension. The following tells the plugin that, when encountering</span></div><div class="line">          <span class="comment">// a dependency that includes a "minApi" dimension, it should select the</span></div><div class="line">          <span class="comment">// "minApi23" flavor. You can include additional flavor names to provide a</span></div><div class="line">          <span class="comment">// sorted list of fallbacks for the dimension.</span></div><div class="line">          missingDimensionStrategy 'minApi', 'minApi23', 'minApi25'</div><div class="line">          <span class="comment">// You should specify a missingDimensionStrategy property for each</span></div><div class="line">          <span class="comment">// dimension that exists in a local dependency but not in your app.</span></div><div class="line">          missingDimensionStrategy 'abi', 'x86', 'arm64'</div><div class="line">    &#125;</div><div class="line">    flavorDimensions 'mode'</div><div class="line">    productFlavors &#123;</div><div class="line">        free &#123;</div><div class="line">            dimension 'mode'</div><div class="line">            <span class="comment">// You can override the default selection at the product flavor</span></div><div class="line">            <span class="comment">// level by configuring another missingDimensionStrategy property</span></div><div class="line">            <span class="comment">// for the "minApi" dimension.</span></div><div class="line">            missingDimensionStrategy 'minApi', 'minApi25', 'minApi23'</div><div class="line">        &#125;</div><div class="line">        paid &#123;&#125;</div><div class="line">    &#125;          </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>值得注意的是，当你的主Module App中包含了一个库中依赖项没有的风味维度时，则不会出现上述问题。例如，当库中依赖项不包含abi这个维度时，freeX86Debug版本将会使用freeDebug版本的依赖。</p></blockquote></li></ul></li></ol><ul><li><p>使用新的依赖配置</p><p>先来看下以前的配置：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">android &#123;...&#125;</div><div class="line">...</div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// The 'compile' configuration tells Gradle to add the dependency to the</span></div><div class="line">    <span class="comment">// compilation classpath and include it in the final package.</span></div><div class="line"></div><div class="line">    <span class="comment">// Dependency on the "mylibrary" module from this project</span></div><div class="line">    <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">":mylibrary"</span>)</div><div class="line"></div><div class="line">    <span class="comment">// Remote binary dependency</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:26.1.0'</span></div><div class="line"></div><div class="line">    <span class="comment">// Local binary dependency</span></div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面也是我们常见的三种依赖项声明：</p><ol><li>模块依赖项</li></ol><p>compile project(‘:mylibrary’) 行声明了一个名为“mylibrary”的本地 Android 库模块作为依赖项，并要求构建系统在构建应用时编译并包含该本地模块。</p><ol><li>远程二进制依赖项</li></ol><p>compile ‘com.android.support:appcompat-v7:26.1.0’ 行会通过指定其 JCenter 坐标，针对 Android 支持库的 26.1.0 版本声明一个依赖项。</p><ol><li>本地二进制依赖项</li></ol><p>compile fileTree(dir: ‘libs’, include: [‘*.jar’]) 行告诉构建系统在编译类路径和最终的应用软件包中包含 app/libs/ 目录内的任何 JAR 文件。</p><p>再来看下以前配置的关键字：</p><ol><li><p>compile</p><p>指定编译时依赖项。Gradle 将此配置的依赖项添加到类路径和应用的 APK。这是默认配置。</p></li><li><p>apk</p><p>指定 Gradle 需要将其与应用的 APK 一起打包的仅运行时依赖项。我们可以将此配置与 JAR 二进制依赖项一起使用，而不能与其他库模块依赖项或 AAR 二进制依赖项一起使用。</p></li><li><p>provided</p><p>指定 Gradle 不与应用的 APK 一起打包的编译时依赖项。如果运行时无需此依赖项，这将有助于缩减 APK 的大小。我们可以将此配置与 JAR 二进制依赖项一起使用，而不能与其他库模块依赖项或 AAR 二进制依赖项一起使用。</p></li><li><p>使用构建变体或者测试源集的名称配置关键字</p><p>这种方式可以为特定的构建变体或者测试源集配置依赖项，如：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// Adds specific library module dependencies as compile time dependencies</span></div><div class="line">    <span class="comment">// to the fullRelease and fullDebug build variants.</span></div><div class="line">    fullReleaseCompile project(<span class="string">path:</span> <span class="string">':library'</span>, <span class="string">configuration:</span> <span class="string">'release'</span>)</div><div class="line">    fullDebugCompile project(<span class="string">path:</span> <span class="string">':library'</span>, <span class="string">configuration:</span> <span class="string">'debug'</span>)</div><div class="line"></div><div class="line">    <span class="comment">// Adds a compile time dependency for local tests.</span></div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line"></div><div class="line">    <span class="comment">// Adds a compile time dependency for the test APK.</span></div><div class="line">    androidTestCompile <span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们再来看下新的配置项：</p></li><li><p>implementation</p><p>原有compile已经废弃掉，新增了implementation，用它来配置模块时，它是用来告诉Gradle该Module不会在编译时暴露其依赖给其他Module，而仅仅是在运行时才会暴露出来，即对其他Module可用。因此它也常常用在该模块不需要有别的模块依赖时声明使用，例如我们的App Module或者test Module。这样做的好处是减少了我们构建的时间。</p></li><li><p>api</p><p>同原有compile，它和上面的区别就是它在编译器和运行期都会暴露它所配置的模块，因此也常常用在                                library module中。这是因为一旦我们api配置的这个Module有变化，Gradle会在编译期重新编译那个依赖项的所有依赖。所以，如果我们项目中有大量的api配置项依赖，那么无形中就增加了构建的时间，除非你想暴露这个模块的API给其他Module使用，否则，我们应尽可能使用implementation来代替。</p></li><li><p>compileOnly</p><p>同上面的provided，只在编译时用，不会打包到我们的APK中</p></li><li><p>runtimeOnly</p><p>同上面的apk</p></li></ol></li><li><p>一些API的变化</p><p>尤其注意的是我们重命名打包的APK文件，以及输出路径。<br>变化前：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">applicationVariants.all &#123; variant -&gt;</div><div class="line">variant.outputs.<span class="keyword">each</span> &#123; output -&gt;</div><div class="line"><span class="keyword">def</span> outputFile = output.outputFile</div><div class="line"><span class="keyword">if</span> (outputFile != <span class="keyword">null</span> &amp;&amp; outputFile.name.endsWith(<span class="string">'.apk'</span>)) &#123;</div><div class="line"><span class="keyword">if</span> (variant.buildType.name == <span class="string">'lotteryTest'</span>) &#123;</div><div class="line"><span class="keyword">def</span> fileName = <span class="string">"myApp_v$&#123;defaultConfig.versionName&#125;_$&#123;releaseTime()&#125;.apk"</span></div><div class="line">output.outputFile = <span class="keyword">new</span> <span class="keyword">File</span>(outputFile.parent, fileName)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>变化后：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">applicationVariants</span>.all &#123; variant -&gt;</span></div><div class="line"><span class="function"><span class="title">variant</span>.outputs.all &#123; output -&gt;</span></div><div class="line">def outputFile = output.outputFile</div><div class="line"><span class="keyword">if</span> (outputFile != null &amp;&amp; outputFile.<span class="keyword">name</span>.endsWith(<span class="string">'.apk'</span>)) &#123;</div><div class="line"><span class="keyword">if</span> (variant.buildType.<span class="keyword">name</span> == <span class="string">'lotteryTest'</span>) &#123;</div><div class="line">def fileName = <span class="string">"myApp_v$&#123;defaultConfig.versionName&#125;_$&#123;releaseTime()&#125;.apk"</span></div><div class="line">outputFileName = new File(fileName)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>即我们需要修改each() 和 outputFile() 方法为 all() 和 outputFileName</p></li></ul><ul><li><p>默认启用AAPT2<br>在迁移的过程中，如果发现由于aapt2导致的异常，可以在gradle.properties中加入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.<span class="attribute">enableAapt2</span>=<span class="literal">false</span></div></pre></td></tr></table></figure></li><li><p>支持Java8新特性</p><ol><li><p>Gradle带来全新的Java8支持方案desugar，启用十分简单，只需要配置下面代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">compileOptions &#123;</div><div class="line">    sourceCompatibility JavaVersion.VERSION_1_8</div><div class="line">    targetCompatibility JavaVersion.VERSION_1_8</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果你不想使用，也可以禁用，可以在gradle.properties中加入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.<span class="attribute">enableDesugar</span>=<span class="literal">false</span></div></pre></td></tr></table></figure><p>记得删除上面的兼容Java8代码。</p></li><li><p>移除Jack工具链，不再支持</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class">android </span>&#123;</div><div class="line">...</div><div class="line"><span class="class">defaultConfig </span>&#123;</div><div class="line">...</div><div class="line"><span class="comment">// Remove this block.</span></div><div class="line"><span class="class">jackOptions </span>&#123;</div><div class="line">enabled true</div><div class="line">...</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Keep the following configuration in order to target Java 8.</span></div><div class="line"><span class="class">compileOptions </span>&#123;</div><div class="line">sourceCompatibility JavaVersion.VERSION_1_8</div><div class="line">targetCompatibility JavaVersion.VERSION_1_8</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>移除Retrolambda插件</p><p>项目级build.gradle 文件：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">...</div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line"><span class="comment">// Remove the following dependency.</span></div><div class="line"><span class="keyword">classpath</span> <span class="string">'me.tatarka:gradle-retrolambda:&lt;version_number&gt;'</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Module级build.gradle文件：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Remove the following plugin.</span></div><div class="line">apply plugin: <span class="string">'me.tatarka.retrolambda'</span></div><div class="line">...</div><div class="line"><span class="comment">// Remove this block after migrating useful configurations.</span></div><div class="line">retrolambda &#123;</div><div class="line">...</div><div class="line"><span class="comment">// If you have arguments for the Java VM you want to keep,</span></div><div class="line"><span class="comment">// move them to your project's gradle.properties file.</span></div><div class="line">jvmArgs <span class="string">'-Xmx2048m'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>目前兼容支持的功能特性有：</p><ul><li>Lambda expressions</li><li>Method References</li><li>Type Annotations</li><li>Default and static interface methods</li><li>Repeating annotations</li></ul></li></ol></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://developer.android.com/studio/write/java8-support.html#migrate" target="_blank" rel="external">https://developer.android.com/studio/write/java8-support.html#migrate</a></li><li><a href="https://android-developers.googleblog.com/2017/10/android-studio-30.html" target="_blank" rel="external">https://android-developers.googleblog.com/2017/10/android-studio-30.html</a></li><li><a href="https://developer.android.com/studio/build/gradle-plugin-3-0-0.html#known_issues" target="_blank" rel="external">https://developer.android.com/studio/build/gradle-plugin-3-0-0.html#known_issues</a></li><li><a href="https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html" target="_blank" rel="external">https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android Studio 3.0 默认Gradle版本为4.1，如果你需要手动升级版本的话，记得修改gradle/wrapper/gradle-wrapper.properties文件的URL地址：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir
      
    
    </summary>
    
      <category term="Android" scheme="https://yuxingxin.com/categories/Android/"/>
    
    
      <category term="Android Studio" scheme="https://yuxingxin.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Node版本管理</title>
    <link href="https://yuxingxin.com/2017/08/16/NodeVersionManage/"/>
    <id>https://yuxingxin.com/2017/08/16/NodeVersionManage/</id>
    <published>2017-08-15T16:00:00.000Z</published>
    <updated>2017-11-14T03:34:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常情况下，当我们有多个项目来维护时，如果各个项目所使用的node版本不一样，这就需要我们同时来管理多个node版本，这时候我们可以使用nvm或者n来管理。</p><h3 id="使用nvm来管理Node"><a href="#使用nvm来管理Node" class="headerlink" title="使用nvm来管理Node"></a>使用nvm来管理Node</h3><p><a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>全称Node Version Manager,它是通过shell脚本实现nodejs版本管理的。，windows下用户官方推荐使用nvmw或nvm-windows。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>通过CURL<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- curl -o- https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/creationix/</span>nvm<span class="regexp">/v0.33.2/i</span>nstall.sh | bash</span><br></pre></td></tr></table></figure></p><p>通过Wget<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/creationix/</span>nvm<span class="regexp">/v0.33.2/i</span>nstall.sh | bash</span><br></pre></td></tr></table></figure></p><p>以上脚本会将nvm仓库clone到~/.nvm目录，然后会在<code>~/.bash_profile, ~/.zshrc, ~/.profile, 或 ~/.bashrc</code>末尾添加source到你的配置文件，当然Mac用户也可以使用Homebrew来安装，安装完成以后需要我们再单独配置shell。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先使用nvm ls-remote命令查看当前都支持哪些版本的 nodejs，然后挑一个最新的稳定版，使用 nvm install 命令安装上即可。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nvm ls-remote</span></span><br></pre></td></tr></table></figure></p><p>安装指定版本：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="keyword">install</span> &lt;node-<span class="keyword">version</span>&gt;</span><br></pre></td></tr></table></figure></p><p>安装完成之后检查：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br></pre></td></tr></table></figure></p><p>我们也可以用下面命令安装最新最稳定的node版本<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="keyword">install</span> stable</span><br></pre></td></tr></table></figure></p><p>删除某版本的node<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="keyword">uninstall</span> &lt;node-<span class="keyword">version</span>&gt;</span><br></pre></td></tr></table></figure></p><p>如删除v8.4.0，过程中出现：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su<span class="symbol">do:</span> <span class="built_in">n</span><span class="symbol">vm:</span> command <span class="built_in">not</span> found</span><br></pre></td></tr></table></figure></p><p>修改下目录权限，查看<code>$NVM_DIR</code>这个变量指向的那个目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$NVM_DIR</span></span></span><br><span class="line">/Users/SeanLiu/.nvm</span><br></pre></td></tr></table></figure></p><p>执行以下命令：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">chown</span> -R SeanLiu <span class="string">"$NVM_DIR/versions/node/v8.4.0"</span></span><br><span class="line">sudo <span class="keyword">chmod</span> -R u+w <span class="string">"$NVM_DIR/versions/node/v8.4.0"</span></span><br></pre></td></tr></table></figure></p><p>再次执行删除命令就可以了：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nvm</span> <span class="selector-tag">uninstall</span> 8<span class="selector-class">.4</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure></p><p>设置默认版本，nvm使用default的alias来实现默认版本，只要执行个命令<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm alias<span class="built_in"> default </span>&lt;node-version&gt;</span><br><span class="line"></span><br><span class="line">nvm alias<span class="built_in"> default </span>8.9.1</span><br></pre></td></tr></table></figure></p><p>以后再登录进系统时，就默认使用的是这个版本了</p><p>我们也可以指定使用某个版本的node：<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="meta"><span class="meta-keyword">use</span> &lt;node-version&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以使用别名设置默认的版本<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="keyword">use</span> <span class="keyword">default</span></span><br></pre></td></tr></table></figure></p><p>查看当前已经安装的版本：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nvm ls</span></span><br></pre></td></tr></table></figure></p><p>查看当前正在使用的版本：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nvm current</span></span><br></pre></td></tr></table></figure></p><p>以指定版本执行脚本：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="built_in">run</span> &lt;node-<span class="built_in">version</span>&gt; myApp.js</span><br></pre></td></tr></table></figure></p><p>卸载nvm<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~<span class="string">/.nvm</span></span><br></pre></td></tr></table></figure></p><h3 id="使用n来管理Node"><a href="#使用n来管理Node" class="headerlink" title="使用n来管理Node"></a>使用n来管理Node</h3><p><a href="https://github.com/tj/n" target="_blank" rel="external">n</a>是非常简单易用的node版本管理器,也是Node的一个模块，作者TJ也是express框架的作者。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g n</span><br></pre></td></tr></table></figure><p>安装完成之后，直接输入n可以显示当前已经安装的版本和正在使用的版本（前面有一个o）,你可以通过移动上下方向键来选择要使用的版本，最后按回车生效。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">n</span></span><br></pre></td></tr></table></figure></p><p>也可以通过CURL来安装<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L <span class="string">https:</span><span class="comment">//git.io/n-install | bash</span></span><br></pre></td></tr></table></figure></p><p>也可以通过如下命令安装：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/visionmedia/n.git</span><br><span class="line"><span class="keyword">cd</span> n</span><br><span class="line"><span class="keyword">make</span> install</span><br></pre></td></tr></table></figure></p><p>如果需要安装到指定目录，需要在安装前增加PREFIX前缀,默认是安装在/usr/local/bin/n，如果将n安装到~/bin/n<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">PREFIX=<span class="variable">$HOME</span> make install</span></span><br></pre></td></tr></table></figure></p><h4 id="n使用"><a href="#n使用" class="headerlink" title="n使用"></a>n使用</h4><p>安装指定版本<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n <span class="tag">&lt;<span class="name">node-versioin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果该版本事先已安装，则就使用它</p><p>安装最新版本<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">n latest</span></span><br></pre></td></tr></table></figure></p><p>安装最稳定版本<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">n stable</span></span><br></pre></td></tr></table></figure></p><p>获取帮助<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n <span class="comment">--help</span></span><br></pre></td></tr></table></figure></p><p>删除某版本node<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">n</span> <span class="keyword">rm</span> &lt;node-<span class="keyword">version</span>&gt;</span><br></pre></td></tr></table></figure></p><p>以指定的版本来执行脚本<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n <span class="meta"><span class="meta-keyword">use</span> &lt;node-version&gt;</span> myApp.js</span><br></pre></td></tr></table></figure></p><p>查看某版本node的安装路径<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n bin &lt;node-<span class="built_in">version</span>&gt;</span><br></pre></td></tr></table></figure></p><h3 id="nvm与n"><a href="#nvm与n" class="headerlink" title="nvm与n"></a>nvm与n</h3><ul><li>n是作为一个node的模块而存在，而nvm 是一个独立于node/npm的外部 shell 脚本，因此n比nvm更加局限。</li><li>不要同时使用两者，这样会导致版本混乱，可以根据自己的喜好，选择其一。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常情况下，当我们有多个项目来维护时，如果各个项目所使用的node版本不一样，这就需要我们同时来管理多个node版本，这时候我们可以使用nvm或者n来管理。&lt;/p&gt;
&lt;h3 id=&quot;使用nvm来管理Node&quot;&gt;&lt;a href=&quot;#使用nvm来管理Node&quot; class=&quot;h
      
    
    </summary>
    
      <category term="Node" scheme="https://yuxingxin.com/categories/Node/"/>
    
    
      <category term="nvm n" scheme="https://yuxingxin.com/tags/nvm-n/"/>
    
  </entry>
  
  <entry>
    <title>局域网下GitLab的部署与汉化</title>
    <link href="https://yuxingxin.com/2017/07/13/GitLab/"/>
    <id>https://yuxingxin.com/2017/07/13/GitLab/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-07-13T10:22:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近有这方面的需求，需要内网搭建一个Git平台，最后选了GitLab社区版，这里记录一下。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>基于Ubuntu LTS 16.04<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 安装依赖包</span></div><div class="line">sudo apt-<span class="keyword">get</span> install curl openssh-server ca-certificates postfix</div><div class="line"><span class="meta"># 安装 GitLab 社区版</span></div><div class="line">apt-<span class="keyword">get</span> install gitlab-ce</div><div class="line"><span class="meta"># 载入配置启动 （安装好后执行就默认启动了,每次修改配置都需要进行载入配置启动）</span></div><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure></p><p>注意使用国内安装源镜像，加快安装速度，修改/etc/apt/sources.list.d/gitlab-ce.list，添加以下行<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/gitlab-<span class="keyword">ce</span>/debian jessie main</div></pre></td></tr></table></figure></p><p>相关命令：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#启动GitLab所以组件</span></div><div class="line">sudo gitlab-ctl <span class="literal">start</span></div><div class="line"><span class="comment">#重启GitLab所有组件</span></div><div class="line">sudo gitlab-ctl <span class="literal">stop</span></div></pre></td></tr></table></figure></p><h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><p>确认当前安装版本<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat <span class="regexp">/opt/gi</span>tlab<span class="regexp">/embedded/</span>service<span class="regexp">/gitlab-rails/</span>VERSION</div></pre></td></tr></table></figure></p><p>克隆GitLab仓库代码：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">git</span>@gitlab.com:xhang/gitlab.git</div></pre></td></tr></table></figure></p><p>接着运行汉化补丁：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># <span class="number">9.3</span> 版本的汉化补丁（<span class="number">9</span><span class="number">-3</span>-stable是英文稳定版，<span class="number">9</span><span class="number">-3</span>-stable-zh是中文版，两个 diff 结果便是汉化补丁）</div><div class="line">sudo git diff origin/<span class="number">9</span><span class="number">-3</span>-stable.<span class="number">.9</span><span class="number">-3</span>-stable-zh &gt; /tmp/<span class="number">9.3</span>.diff</div><div class="line"># 停止 gitlab</div><div class="line">sudo gitlab-ctl stop</div><div class="line"># 应用汉化补丁</div><div class="line">cd /opt/gitlab/embedded/service/gitlab-rails</div><div class="line">git apply /tmp/<span class="number">9.3</span>.diff  </div><div class="line"># 启动gitlab</div><div class="line">sudo gitlab-ctl start</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有这方面的需求，需要内网搭建一个Git平台，最后选了GitLab社区版，这里记录一下。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;基于Ubuntu LTS 16.0
      
    
    </summary>
    
      <category term="工具" scheme="https://yuxingxin.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gitlab" scheme="https://yuxingxin.com/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>终端下Python镜像源管理工具pprm</title>
    <link href="https://yuxingxin.com/2017/03/01/Pprm/"/>
    <id>https://yuxingxin.com/2017/03/01/Pprm/</id>
    <published>2017-02-28T16:00:00.000Z</published>
    <updated>2017-03-08T08:28:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在使用Python做开发的时候，常常会用到第三方库，.虽然用easy_install和pip来安装第三方库很方便，但默认的第三方库是从Python的<a href="https://pypi.python.org/pypi" target="_blank" rel="external">官方源</a>下载的，因为某些原因，官方的网站访问时快时慢，很不稳定，有时候也直接打不开了，网上可以找一些国内的镜像源可以做为替换，通过修改配置文件(<code>~/.pip/pip.conf</code>)pip.conf即可，其实这个小工具的作用就是帮我们做这个事情，另外也提供了增删查等其他相关命令。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  npm <span class="keyword">install</span> -g pprm</div></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h5 id="列出所有的镜像源地址："><a href="#列出所有的镜像源地址：" class="headerlink" title="列出所有的镜像源地址："></a>列出所有的镜像源地址：</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">$</span> <span class="string">prm</span> <span class="string">ls</span></div><div class="line"></div><div class="line">  <span class="string">pypi</span> <span class="meta">---</span> <span class="attr">https://pypi.python.org/simple/</span></div><div class="line"><span class="string">*</span> <span class="string">douban</span> <span class="bullet">-</span> <span class="attr">https://pypi.doubanio.com/simple/</span></div><div class="line">  <span class="string">ali</span> <span class="bullet">----</span> <span class="attr">http://mirrors.aliyun.com/pypi/simple/</span></div><div class="line">  <span class="string">tsinghua</span>  <span class="attr">https://pypi.tuna.tsinghua.edu.cn/simple/</span></div><div class="line">  <span class="string">ustc</span> <span class="meta">---</span> <span class="attr">https://mirrors.ustc.edu.cn/pypi/web/simple/</span></div></pre></td></tr></table></figure><h5 id="切换镜像源："><a href="#切换镜像源：" class="headerlink" title="切换镜像源："></a>切换镜像源：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ prm <span class="keyword">use</span> <span class="keyword">ali</span></div><div class="line"></div><div class="line">Registry has been <span class="keyword">set</span> <span class="keyword">to</span>: <span class="keyword">http</span>://mirrors.aliyun.com/pypi/simple/</div></pre></td></tr></table></figure><h5 id="查看当前镜像源："><a href="#查看当前镜像源：" class="headerlink" title="查看当前镜像源："></a>查看当前镜像源：</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>prm current</div><div class="line"></div><div class="line">douban</div></pre></td></tr></table></figure><h5 id="添加镜像源："><a href="#添加镜像源：" class="headerlink" title="添加镜像源："></a>添加镜像源：</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ prm <span class="keyword">add</span><span class="bash"> <span class="string">'registry_name'</span> <span class="string">'registry_url'</span> <span class="string">'registry_home_url'</span></span></div><div class="line"><span class="comment"># 参数依次是镜像源的名称、地址、项目首页</span></div></pre></td></tr></table></figure><h5 id="删除指定的镜像源："><a href="#删除指定的镜像源：" class="headerlink" title="删除指定的镜像源："></a>删除指定的镜像源：</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="selector-tag">del</span> <span class="string">'registry_name'</span></div></pre></td></tr></table></figure><h5 id="用浏览器打开主页："><a href="#用浏览器打开主页：" class="headerlink" title="用浏览器打开主页："></a>用浏览器打开主页：</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">prm <span class="built_in">home</span> <span class="string">'registry_name'</span></div></pre></td></tr></table></figure><h5 id="测试镜像源地址的响应速度："><a href="#测试镜像源地址的响应速度：" class="headerlink" title="测试镜像源地址的响应速度："></a>测试镜像源地址的响应速度：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">prm <span class="built_in">test</span> <span class="string">'registry_name'</span></div></pre></td></tr></table></figure><h5 id="帮助中心"><a href="#帮助中心" class="headerlink" title="帮助中心"></a>帮助中心</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">prm <span class="built_in">help</span></div></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/450566-ae3ae41a9170f4e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pprm"></p><h5 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">prm <span class="built_in">version</span></div></pre></td></tr></table></figure><h3 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h3><ul><li><a href="https://github.com/yuxingxin/pprm" target="_blank" rel="external">GitHub_pprm</a></li><li><a href="https://www.npmjs.com/package/pprm" target="_blank" rel="external">npm_pprm</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在使用Python做开发的时候，常常会用到第三方库，.虽然用easy_install和pip来安装第三方库很方便，但默认的第三方库是从Python的&lt;a href=&quot;https://pypi.python.org/pypi&quot; target=&quot;_blank&quot; rel=&quot;e
      
    
    </summary>
    
      <category term="工具" scheme="https://yuxingxin.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="registry" scheme="https://yuxingxin.com/tags/registry/"/>
    
  </entry>
  
  <entry>
    <title>关于Node和Python语言的包镜像源的替换</title>
    <link href="https://yuxingxin.com/2017/02/28/PackageRegistry/"/>
    <id>https://yuxingxin.com/2017/02/28/PackageRegistry/</id>
    <published>2017-02-27T16:00:00.000Z</published>
    <updated>2017-03-01T07:54:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做一些node和Python的相关开发，在更新下载包的时候发现特别慢，有时候还卡在那里半天不动，在网上查了一些国内的镜像源替换了下，就相当快了，这里简单做个记录。</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>我们在使用Python做开发的时候，常常会用到第三方库，.虽然用easy_install和pip来安装第三方库很方便，但默认的第三方库是从Python的<a href="https://pypi.python.org/pypi" target="_blank" rel="external">官方源</a>下载的，因为某些原因，官方的网站访问时快时慢，很不稳定，有时候也直接打不开了，这里找一些国内的镜像源可以做为替换：</p><ul><li><a href="https://pypi.douban.com/simple/" target="_blank" rel="external">豆瓣</a></li><li><a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="external">阿里</a></li><li><a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="external">清华大学</a></li><li><a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="external">中国科学技术大学</a></li></ul><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>我们只需要选一个上面的地址配置到默认路径下(linux下<code>~/.pip/pip.conf</code>,windows在<code>%HOMEPATH%\pip\pip.ini</code>)的pip.conf文件即可：<br>修改内容为：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[global]</span></div><div class="line"><span class="attr">index-url</span> = http://pypi.douban.com/simple</div></pre></td></tr></table></figure></p><p>另外可以参考我的这篇文章写得一个小工具<a href="http://www.jianshu.com/p/ff459d79e3fd" target="_blank" rel="external">pprm</a></p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>由于Node的第三方包下载站也是相当的慢，所以我们也需要更换下镜像源，Linux用户默认只需要修改配置文件(<code>~/.npmrc</code>)即可:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/<span class="regexp">/registry.npmjs.org/</span><span class="symbol">:_authToken=f8378722-</span><span class="number">2</span>ecf-<span class="number">4564</span>-<span class="number">84</span>cc-<span class="number">57</span>b262467cf6</div><div class="line">registry=<span class="symbol">https:</span>/<span class="regexp">/registry.npm.taobao.org/</span>  /<span class="regexp">/替换这一行为你指定的源即可</span></div></pre></td></tr></table></figure></p><p>当然有时候我们会发现这样该来改去也比较麻烦，所以就有人写出了<a href="https://github.com/Pana/nrm" target="_blank" rel="external">nrm</a>:一个 NPM 源管理器，允许你快速地在如下 NPM 源间切换</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g nrm</div></pre></td></tr></table></figure><h4 id="列出可选的源"><a href="#列出可选的源" class="headerlink" title="列出可选的源"></a>列出可选的源</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  <span class="string">nrm</span> <span class="string">ls</span>    </div><div class="line"></div><div class="line">  <span class="string">npm</span> <span class="bullet">----</span> <span class="attr">https://registry.npmjs.org/</span></div><div class="line">  <span class="string">cnpm</span> <span class="meta">---</span> <span class="attr">http://r.cnpmjs.org/</span></div><div class="line"><span class="string">*</span> <span class="string">taobao</span> <span class="bullet">-</span> <span class="attr">https://registry.npm.taobao.org/</span></div><div class="line">  <span class="string">nj</span> <span class="bullet">-----</span> <span class="attr">https://registry.nodejitsu.com/</span></div><div class="line">  <span class="string">rednpm</span> <span class="bullet">-</span> <span class="attr">http://registry.mirror.cqupt.edu.cn/</span></div><div class="line">  <span class="string">npmMirror</span>  <span class="attr">https://skimdb.npmjs.com/registry/</span></div><div class="line">  <span class="string">edunpm</span> <span class="bullet">-</span> <span class="attr">http://registry.enpmjs.org/</span></div></pre></td></tr></table></figure><p>其中带 * 的是当前使用的源，上面的输出表明当前源是淘宝镜像源。</p><h4 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nrm use npm</div><div class="line"></div><div class="line">Registry <span class="keyword">has</span> been <span class="keyword">set</span> <span class="keyword">to</span>: https:<span class="comment">//registry.npmjs.org/</span></div></pre></td></tr></table></figure><p>上面命令代表切换到npm官方源</p><h4 id="增加源"><a href="#增加源" class="headerlink" title="增加源"></a>增加源</h4><p>你可以增加定制的源，特别适用于添加企业内部的私有源。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nrm <span class="built_in">add</span>  <span class="symbol">&lt;registry&gt;</span> <span class="symbol">&lt;url&gt;</span> [home]</div></pre></td></tr></table></figure></p><h4 id="删除源"><a href="#删除源" class="headerlink" title="删除源"></a>删除源</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nrm <span class="selector-tag">del</span> &lt;registry&gt;</div></pre></td></tr></table></figure><h4 id="测试速度"><a href="#测试速度" class="headerlink" title="测试速度"></a>测试速度</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nrm test <span class="built_in">npm</span>  <span class="comment">#测试官方npm源的访问速度</span></div><div class="line"></div><div class="line"><span class="built_in">npm</span> ---- <span class="number">964</span>ms</div></pre></td></tr></table></figure><p>测试所有源的访问速度：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nrm <span class="built_in">test</span></div></pre></td></tr></table></figure></p><p>注意，为了取得较准确的结果，可以考虑多次测试取平均值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做一些node和Python的相关开发，在更新下载包的时候发现特别慢，有时候还卡在那里半天不动，在网上查了一些国内的镜像源替换了下，就相当快了，这里简单做个记录。&lt;/p&gt;
&lt;h3 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="工具" scheme="https://yuxingxin.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="registry" scheme="https://yuxingxin.com/tags/registry/"/>
    
  </entry>
  
  <entry>
    <title>博客的迁移及自动化部署并全站https化</title>
    <link href="https://yuxingxin.com/2017/02/17/DeployViaHttps/"/>
    <id>https://yuxingxin.com/2017/02/17/DeployViaHttps/</id>
    <published>2017-02-16T16:00:00.000Z</published>
    <updated>2017-09-01T04:54:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>过完年来想把博客做一个迁移，放到自己购买的服务器上，并实现自动化部署，并启用全站HTTPS</p><h3 id="hexo本地部署"><a href="#hexo本地部署" class="headerlink" title="hexo本地部署"></a>hexo本地部署</h3><p>这一步骤网上有很多教程，这里不再多说了</p><h3 id="服务器自动化部署"><a href="#服务器自动化部署" class="headerlink" title="服务器自动化部署"></a>服务器自动化部署</h3><p>大体的流程就是，我们通过<code>hexo g</code>命令在本地生成静态文件以后，通过git push到我们的远程仓库(这里我用的是GitHub)，然后由于我们事先在项目库中配置了webhooks，由它post到你的服务器一个请求链接，我们的服务器收到请求后，对应执行我们提前写好的脚本，再将push的内容同步到我们的服务器，从而更新了服务器的内容。</p><h3 id="服务器环境配置"><a href="#服务器环境配置" class="headerlink" title="服务器环境配置"></a>服务器环境配置</h3><p>我们通过ssh(windows用户可以通过putty登录)登录到我们的服务，我这里用的是Ubuntu系统，安装好nodejs,git,nginx后，将我们的文件从远程仓库拉下来<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> blog</div><div class="line"><span class="keyword">cd</span> blog</div><div class="line">git init</div><div class="line">git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/yuxingxin/yuxingxin.github.io.git</div><div class="line">git pull origin master</div></pre></td></tr></table></figure></p><ol><li>配置nginx<br>这个配置之前写的有相关文章，不明白得可以看<a href="http://www.jianshu.com/p/3531a011b7b6" target="_blank" rel="external">这里</a>，不过这里的系统是Ubuntu，所以nginx的安装路径也不太一样(<code>/etc/nginx</code>)<br>默认我们需要在<code>/etc/nginx/conf.d/</code>目录下添加配置文件blog.conf<br><strong>注意这里的后缀名一定是<code>.conf</code></strong><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">vim</span> /etc/nginx/<span class="keyword">conf</span>.d/blog.<span class="keyword">conf</span></div></pre></td></tr></table></figure></li></ol><p>然后配置上我们的域名，端口和映射地址<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;  <span class="comment">#修改这里为其他端口如8081</span></div><div class="line">    <span class="attribute">server_name</span>  yuxingxin.com www.yuxingxin.com; <span class="comment"># 这里是你的域名</span></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">root</span>   /root/blog/; <span class="comment">#修改这里的路径为自己的路径</span></div><div class="line">        <span class="attribute">index</span>  index.html index.htm;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后重启nginx通过域名就可以访问我们的博客了<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">nginx -s reload</span></div></pre></td></tr></table></figure></p><ol><li>webhooks配置<br>也就是人们常说的钩子，是一个很有用的工具。你可以通过定制 Webhook 来监测你在 Github.com 上的各种事件，最常见的莫过于 push 事件,如果你设置了一个监测 push 事件的 Webhook，那么每当你的这个项目有了任何提交，这个 Webhook 都会被触发，这时 Github 就会发送一个 HTTP POST 请求到你配置好的地址。如此一来，你就可以通过这种方式去自动完成一些重复性工作；比如，你可以用 Webhook 来自动触发一些持续集成（CI）工具的运作，比如 Travis CI；又或者是通过 Webhook 去部署你的线上服务器。<br>Webhook 的配置是十分简单的。首先进入你的 repo 主页，通过点击页面上的按钮 [settings] -&gt; [Webhooks &amp; service] 进入 Webhooks 配置主页面。在Payload URL配置链接，比如：<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span>//xxxxx.com:<span class="number">8246</span>/webhooks/<span class="keyword">push</span>/deploy</div></pre></td></tr></table></figure></li></ol><p>这样一来，仓库的配置就算好了，接下来看服务器端如何响应</p><ol><li>服务器配置webhooks响应<br>首先我们在我们的博客目录下创建一个js文件，用来启动我们的监听服务，端口就是我们在仓库配置那里的端口地址：8246<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line">var exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span>(req.url === <span class="string">'/webhooks/push/deploy'</span>)&#123;</div><div class="line">        exec(<span class="string">'sh ./deploy.sh'</span>,<span class="function"><span class="keyword">function</span><span class="params">(error,stdout,stderr)</span></span>&#123;</div><div class="line">     <span class="keyword">if</span>(<span class="built_in">error</span>)&#123;</div><div class="line">  console.<span class="built_in">log</span>(<span class="built_in">error</span>.stack);</div><div class="line">  console.<span class="built_in">log</span>(<span class="string">'Error code:'</span>+ <span class="built_in">error</span>.code);</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">          console.<span class="built_in">log</span>(<span class="string">'success'</span>);</div><div class="line">     &#125;</div><div class="line">&#125;)</div><div class="line">    &#125;</div><div class="line">    res.<span class="keyword">end</span>()</div><div class="line">&#125;).listen(<span class="number">8246</span>)</div></pre></td></tr></table></figure></li></ol><p>这段代码就能启动一个nodejs服务，监听8246端口。<br>当请求过来的url完全匹配的时候，执行deploy.sh。<br>再新建一个deploy.sh文件处理部署相关脚本<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin <span class="literal">master</span></div></pre></td></tr></table></figure></p><ol><li>运行nodejs服务<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span> <span class="title">./webhooks</span>.js</div></pre></td></tr></table></figure></li></ol><p>如果你使用上面的命令运行nodejs服务，nodejs服务会在前台运行，可以使用<a href="https://www.npmjs.com/package/pm2" target="_blank" rel="external">pm2</a>使nodejs运行在后台。<br>安装<br><code>npm install pm2 -g</code><br>启动服务<br><code>pm2 start webhooks.js</code><br>停止服务<br><code>pm2 stop webhooks.js</code><br>重启服务<br><code>pm2 restart webhooks.js</code><br>另外我们也可以实时查看pm2的日志服务<br><code>pm2 logs</code></p><p>到此为止我们的自动化部署就全部完成了，以后我们只需在本地将文件push到远程仓库，就会自动同步到我们的服务器上</p><h3 id="启用全站HTTPS"><a href="#启用全站HTTPS" class="headerlink" title="启用全站HTTPS"></a>启用全站HTTPS</h3><p>这里简单总结下在 Nginx 配置 HTTPS 服务器：主要签署第三方可信任的证书和配置HTTPS</p><h3 id="关于证书"><a href="#关于证书" class="headerlink" title="关于证书"></a>关于证书</h3><p>SSL证书需要向国际公认的证书证书认证机构（简称CA，Certificate Authority）申请。<br>CA机构颁发的证书有3种类型：</p><ul><li>域名型SSL证书（DV SSL）：信任等级普通，只需验证网站的真实性便可颁发证书保护网站；</li><li>企业型SSL证书（OV SSL）：信任等级强，须要验证企业的身份，审核严格，安全性更高；</li><li>增强型SSL证书（EV SSL）：信任等级最高，一般用于银行证券等金融机构，审核严格，安全性最高，同时可以激活绿色网址栏。</li></ul><p>关于证书服务，市面上大体的都是收费的证书，当然也有部分是免费的，比如Let’s Encrypt  刚刚又拍云也上线了免费的 SSL <a href="http://weibo.com/ttarticle/p/show?id=2309404057245016043005#_0" target="_blank" rel="external">证书</a>，另外StartSSL也提供免费证书，有效期3年；另外还有腾讯云和阿里云都有相关的免费证书，这里我使用的是Let’s Encrypt ,这也是目前最知名的开源SSL证书。</p><h5 id="证书申请"><a href="#证书申请" class="headerlink" title="证书申请"></a>证书申请</h5><p>申请 Let’s Encrypt 证书不但免费，还非常简单，虽然每次只有 90 天的有效期，但可以通过脚本定期更新，配好之后一劳永逸。Let’s Encrypt 的证书签发过程使用的就是 ACME 协议,这里也推荐一个小工具就是<a href="https://github.com/diafygi/acme-tiny" target="_blank" rel="external">acme-tiny</a>,它可以帮助我们简化创建证书的流程。</p><ol><li><p>创建帐号<br>创建一个目录存放私钥证书等各种文件，然后进入后创建我们的RSA账户私钥</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> ssl</div><div class="line"><span class="built_in">cd</span> ssl</div><div class="line">openssl genrsa <span class="number">4096</span> &gt; account.key</div></pre></td></tr></table></figure></li><li><p>创建 CSR 文件<br>这一步生成我们的证书签名文件，即CSR，首先要创建RSA私钥</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl genrsa <span class="number">4096</span> &gt; domain.<span class="type">key</span></div></pre></td></tr></table></figure></li></ol><p>接下来就可以生成我们的证书文件了，单个域名和多个域名生产的参数还不太一样.<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//单个域名</div><div class="line">openssl req -<span class="built_in">new</span> -sha256 -<span class="built_in">key</span> <span class="built_in">domain</span>.<span class="built_in">key</span> -subj <span class="string">"/CN=yuxingxin.com"</span> &gt; <span class="built_in">domain</span>.csr</div><div class="line">//多个域名（比如yuxingxin.com和www.yuxingxin.com）</div><div class="line">openssl req -<span class="built_in">new</span> -sha256 -<span class="built_in">key</span> <span class="built_in">domain</span>.<span class="built_in">key</span> -subj <span class="string">"/"</span> -reqexts SAN -config &lt;(cat /etc/ssl/openssl.cnf &lt;(<span class="built_in">printf</span> <span class="string">"[SAN]\nsubjectAltName=DNS:yuxingxin.com,DNS:www.yuxingxin.com"</span>)) &gt; <span class="built_in">domain</span>.csr</div></pre></td></tr></table></figure></p><ol><li>配置验证服务<br>CA 在签发 DV（Domain Validation）证书时，需要验证域名所有权，而大部分都是通过邮件验证的方式，Let’s Encrypt 则是在你的服务器上生成一个随机验证文件，再通过创建 CSR 时指定的域名访问，如果可以访问则表明你对这个域名有控制权。<br>首先创建用于存放验证文件的目录<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> ~/www/challenges/</div></pre></td></tr></table></figure></li></ol><p>然后配置一个 HTTP 服务，以 Nginx 为例：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</div><div class="line">    <span class="comment"># 这里改成自己的域名</span></div><div class="line">    <span class="attribute">server_name</span> yuxingxin.com www.yuxingxin.com;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> /.well-known/acme-challenge/ &#123;</div><div class="line">        <span class="attribute">alias</span> /root/www/challenges/;</div><div class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ol><li>生成网站证书<br>先把acme-tiny脚本保存到之前的ssl目录<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/diafygi/</span>acme-tiny<span class="regexp">/master/</span>acme_tiny.py</div></pre></td></tr></table></figure></li></ol><p>指定账户私钥、CSR 以及验证目录，在ssl目录下执行脚本<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python acme_tiny.py <span class="params">--account-key</span> <span class="string">./account.key</span> <span class="params">--csr</span> <span class="string">./domain.csr</span> <span class="params">--acme-dir</span> <span class="string">/root/www/challenges/</span> &gt; <span class="string">./signed.crt</span></div></pre></td></tr></table></figure></p><p>如果一切正常，当前目录ssl下就会生成一个 signed.crt，这就是申请好的证书文件。<br>这里遇到一个错误,大致如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ValueError: Wrote <span class="keyword">file</span> to <span class="regexp">/root/</span>www<span class="regexp">/challenges/</span>oJbvpIhkwkBGBAQUklWJXyC8VbWAdQqlgpwUJkgC1Vg, but couldn<span class="string">'t download http://www.yuxingxin.com/.well-known/acme-challenge/oJbvpIhkwkBGBAQUklWJXyC8VbWAdQqlgpwUJkgC1Vg</span></div></pre></td></tr></table></figure></p><p>网上查了一些方案，觉得有一个比较靠谱，也得到了解决，大致就是原来库做了一个验证导致有些情况通不过，这里有人fork源库修改了部分代码，地址在<a href="https://github.com/frezbo/acme-tiny" target="_blank" rel="external">这里</a>，如果出现上述错误，可以获取这个库的脚步然后在执行上面那条命令。</p><ol><li><p>下载中间证书</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget -O - https:<span class="comment">//letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</span></div><div class="line">cat signed<span class="selector-class">.crt</span> intermediate<span class="selector-class">.pem</span> &gt; chained.pem</div></pre></td></tr></table></figure></li><li><p>为了后续能顺利启用 OCSP Stapling，我们再把根证书和中间证书合在一起：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget -O - https:<span class="comment">//letsencrypt.org/certs/isrgrootx1.pem &gt; root.pem</span></div><div class="line">cat intermediate<span class="selector-class">.pem</span> root<span class="selector-class">.pem</span> &gt; full_chained.pem</div></pre></td></tr></table></figure></li><li><p>修改nginx证书配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</div><div class="line">    <span class="comment">#修改成自己的域名</span></div><div class="line">    <span class="attribute">server_name</span> yuxingxin.com www.yuxingxin.com;</div><div class="line"></div><div class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</div><div class="line">    <span class="comment">#这里注意证书路径</span></div><div class="line">    <span class="attribute">ssl_certificate</span> /root/ssl/chained.pem;</div><div class="line">    <span class="attribute">ssl_certificate_key</span> /root/ssl/domain.key;</div><div class="line"></div><div class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</div><div class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;</div><div class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">50m</span>;</div><div class="line">    <span class="attribute">ssl_dhparam</span> /root/ssl/dhparam.pem;</div><div class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">resolver</span> <span class="number">8.8.8.8</span>;</div><div class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">ssl_trusted_certificate</span> /root/ssl/signed.crt;</div><div class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">"max-age=31536000; includeSubdomains;preload"</span>;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="comment"># 这里要改成自己存放博客静态网页的目录</span></div><div class="line">        <span class="attribute">root</span>  /root/blog;</div><div class="line">        <span class="attribute">index</span>  index.html index.htm;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</div><div class="line">    <span class="comment"># 这里改成自己的域名</span></div><div class="line">    <span class="attribute">server_name</span> yuxingxin.com www.yuxingxin.com;</div><div class="line">    <span class="attribute">ssl_certificate</span> /root/ssl/chained.pem;</div><div class="line">    <span class="attribute">ssl_certificate_key</span> /root/ssl/domain.key;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> /.well-known/acme-challenge/ &#123;</div><div class="line">        <span class="attribute">alias</span> /root/www/challenges/;</div><div class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">#error_page  404              /404.html;</span></div><div class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</div><div class="line">    <span class="attribute">location</span> = /50x.html &#123;</div><div class="line">        <span class="attribute">root</span>   html;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h4 id="配置自动更新"><a href="#配置自动更新" class="headerlink" title="配置自动更新"></a>配置自动更新</h4><p>Let’s Encrypt 签发的证书只有 90 天有效期，推荐使用脚本定期更新<br>创建脚本文件并赋予执行权限<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> <span class="keyword">shell</span></div><div class="line"><span class="keyword">cd</span> <span class="keyword">shell</span></div><div class="line"><span class="keyword">vi</span> renew_cert.<span class="keyword">sh</span></div></pre></td></tr></table></figure></p><p>并复制下面内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">cd</span> /root/ssl/</div><div class="line">python acme_tiny.py --account-key account.key --csr domain.csr --acme-dir /root/www/challenges/ &gt; signed.crt || <span class="built_in">exit</span></div><div class="line">wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</div><div class="line">cat signed.crt intermediate.pem &gt; chained.pem</div><div class="line">service nginx reload</div></pre></td></tr></table></figure></p><p>这里借助crontab来定时执行任务，它是一个可以用来根据时间、日期、月份、星期的组合来调度对重复任务的执行的守护进程。<br>执行<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">crontab -e</span></div></pre></td></tr></table></figure></p><p>然后 添加如下内容<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">1</span> * * /root/<span class="keyword">shell</span>/renew_cert.sh &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></div></pre></td></tr></table></figure></p><p>这样以后证书每个月都会自动更新，一劳永逸。<br>另外这里也推荐一个网站，可以监测你的证书的有效期<br><a href="https://letsmonitor.org/" target="_blank" rel="external">https://letsmonitor.org</a><br>这样的话就算完了，但是这里有几点做说明</p><ul><li><p>dhparam的生成</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl dhparam -out <span class="regexp">/etc/</span>nginx<span class="regexp">/ssl/</span>dhparam.pem <span class="number">2048</span></div></pre></td></tr></table></figure></li><li><p>强制HTTPS</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#另外还有两种其他的配置方式，可以自行Google</span></div><div class="line"> <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li><li><p>关于HSTS<br>HTTP Strict Transport Security的缩写，即：“HTTP严格传输安全”。假设一个用户从来没有访问过我的网站，并且他第一次访问的时候访问的是 <a href="http://yuxingxin.com">http://yuxingxin.com</a> ，在正常的情况下，我的服务器就会给这位用户返回一个 301 跳转到 <a href="https://yuxingxin.com">https://yuxingxin.com</a> ，并且带上上面配置的HSTS头，在用户下次访问我的博客时，只要 HSTS 还在有效期中，浏览器就会直接跳转到相对应的 https 页面，并且这是不需要经过数据传输的，直接在本地浏览器进行的处理。<br>目前大部分浏览器对HSTS的支持已经相当完美，具体各浏览器和版本的支持情况可以在<a href="http://caniuse.com/#search=HSTS" target="_blank" rel="external">这里</a>上查看。 但是HSTS是有缺陷的，第一次访问网站的客户端，HSTS并不工作。 要解决这个问题，就需要我们下面要讲解的HSTS preload list。它是一个站点的列表，并通过硬编码写入 Chrome 浏览器中，列表中的站点将会默认使用 HTTPS 进行访问，此外，Firefox 、Safari 、IE 11 和 Edge 也同样用一份 HSTS 站点列表，它申请加入需要一些条件：</p></li><li>有一张有效的证书（如果是使用了 SHA-1 证书签名算法的必须在 2016 年前失效）</li><li>重定向所有的 HTTP 流量到 HTTPS （ HTTPS ONLY ）</li><li>全部子域名的流量均通过 HTTPS ，如果子域名的 www 存在的话也同样需要通过 HTTPS 传输。</li><li>在相应的域名中输出 HSTS 响应头<br>1 过期时间至少大于 18 周（10886400 秒）<br>2 必须声明 includeSubdomains<br>3 必须声明 preload<br>4 跳转过去的那个页面也需要有 HSTS 头<br>点击<a href="https://hstspreload.org/" target="_blank" rel="external">这里</a>开始申请，申请成功后，你的域名就会加入到<a href="https://code.google.com/p/chromium/codesearch#chromium/src/net/http/transport*security*state_static.json" target="_blank" rel="external">这个列表</a><br><img src="http://upload-images.jianshu.io/upload_images/450566-d5d44b46903e8552.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ssl.png"><br>如果大多数浏览器都已经更新到新的列表，那么针对国内的 VPS ，不打开80端口，只打开 443 ，浏览器同样会跳转过来，这样就可以免备案了，不过好像这样对搜索引擎就不太友好。</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>所有这些工作完成以后，我们可以对证书进行检测。这里是<a href="https://www.ssllabs.com/ssltest/index.html" target="_blank" rel="external">检测地址</a> ，下面是我的域名的检测报告。<br><img src="http://upload-images.jianshu.io/upload_images/450566-082a2a529b747654.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="report.jpeg"><br>如果是A+,则说明你的配置是好着的。另外这里也给出一个国内也列一个<a href="https://www.chinassl.net/ssltools/ssl-checker.html" target="_blank" rel="external">检测网站</a></p><p>另外上面如果觉得麻烦的话，这里推荐一个别人写的<a href="https://github.com/xdtianyu/scripts/blob/master/lets-encrypt/README-CN.md" target="_blank" rel="external">脚本</a>,它是一个快速获取/更新 Let’s encrypt 证书的 shell script，使用该脚本可以简化上面的流程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;过完年来想把博客做一个迁移，放到自己购买的服务器上，并实现自动化部署，并启用全站HTTPS&lt;/p&gt;
&lt;h3 id=&quot;hexo本地部署&quot;&gt;&lt;a href=&quot;#hexo本地部署&quot; class=&quot;headerlink&quot; title=&quot;hexo本地部署&quot;&gt;&lt;/a&gt;hexo本地部署
      
    
    </summary>
    
      <category term="https" scheme="https://yuxingxin.com/categories/https/"/>
    
    
      <category term="https" scheme="https://yuxingxin.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Mac平台nginx相关安装配置</title>
    <link href="https://yuxingxin.com/2017/02/14/NginxConfig/"/>
    <id>https://yuxingxin.com/2017/02/14/NginxConfig/</id>
    <published>2017-02-13T16:00:00.000Z</published>
    <updated>2017-02-28T06:22:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>##安装</p><p>我们通过brew来安装nginx<br><code>brew install nginx</code></p><blockquote><p>我在安装过程中出现一个小问题,报了这样一个错误：<br><code>Error: Could not symlink share/man/man8/nginx.8/usr/local/share/man/man8 is not writable.</code><br>从上面看大体意思就是<code>/usr/local/share/man/man8</code>这个目录对当前用户无写权限，所以我们给这个目录加上就可以了</p></blockquote><ul><li><p>下图为ls -l命令结果</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">drwxr-xr-x  <span class="number"> 38 </span>SeanLiu  admin <span class="number"> 1292 </span><span class="number"> 2 </span>13 17:28 man1</div><div class="line">drwxr-xr-x <span class="number"> 103 </span>SeanLiu  admin <span class="number"> 3502 </span><span class="number"> 2 </span>13 17:28 man3</div><div class="line">drwxr-xr-x   <span class="number"> 7 </span>root     admin  <span class="number"> 238 </span><span class="number"> 1 </span>22 18:31 man8</div><div class="line">-rw-r--r--   <span class="number"> 1 </span>root     admin <span class="number"> 1583 </span><span class="number"> 2 </span>10 08:19 whatis</div></pre></td></tr></table></figure></li><li><p>执行<code>sudo chown -R \</code>whoami` man8`</p></li><li>最后执行<code>brew link nginx</code>就好了</li></ul><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ol><li>nginx默认安装路径：<br><code>/usr/local/Cellar/nginx/1.10.3</code></li><li>nginx配置文件路径:<br><code>/usr/local/etc/nginx</code></li><li>nginx启动命令<br><code>nginx</code></li><li>如果出现<code>nginx: [emerg] bind() to 0.0.0.0:8080 failed (48: Address already in use)</code>错误，其实是8080端口被占用了，我们可以通过修改默认端口来避免错误：<br><code>vim /usr/local/etc/nginx/nginx.conf</code><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>       <span class="number">8081</span>;  <span class="comment">#修改这里为其他端口如8081</span></div><div class="line">    <span class="attribute">server_name</span>  localhost;</div><div class="line"></div><div class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">root</span>   html;</div><div class="line">        <span class="attribute">index</span>  index.html index.htm;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></li></ol><p>最后保存重新运行</p><ol><li>更改默认web路径<br>默认路径为<code>/usr/local/Cellar/nginx/1.10.3/html</code><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>       <span class="number">8081</span>;  <span class="comment">#修改这里为其他端口如8081</span></div><div class="line">    <span class="attribute">server_name</span>  localhost;</div><div class="line"></div><div class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">root</span>   html; <span class="comment">#修改这里的路径为自己的路径 如/Users/xxx/www</span></div><div class="line">        <span class="attribute">index</span>  index.html index.htm;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></li></ol><p>然后重启nginx 执行 <code>nginx -s reload</code> 就可以了</p><ol><li>停止<br>首先查找到nginx的进程号：<br><code>ps -ef | grep nginx</code><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root      <span class="number"> 713 </span>   <span class="number"> 1 </span><span class="number"> 0 </span>00:15 ?        00:00:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;</div><div class="line">www-data  <span class="number"> 717 </span> <span class="number"> 713 </span><span class="number"> 0 </span>00:15 ?        00:00:00 nginx: worker process</div><div class="line">root     <span class="number"> 5345 </span><span class="number"> 4226 </span><span class="number"> 0 </span>15:23 pts/1    00:00:00 grep --color=auto nginx</div></pre></td></tr></table></figure></li></ol><p>执行命令 <code>kill -QUIT 713</code><br>另外还有两种：<br>快速停止<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`kill -TERM <span class="number">713</span>`或者`kill -INT <span class="number">713</span>`</div></pre></td></tr></table></figure></p><p> 强行停止<br><code>pkill -9 nginx</code></p><ol><li>验证nginx配置文件是否正确<br><code>nginx -t</code><br>出现下面则配置正确<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nginx: the configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">syntax</span> <span class="keyword">is</span> ok</div><div class="line">nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> test <span class="keyword">is</span> successful</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##安装&lt;/p&gt;
&lt;p&gt;我们通过brew来安装nginx&lt;br&gt;&lt;code&gt;brew install nginx&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我在安装过程中出现一个小问题,报了这样一个错误：&lt;br&gt;&lt;code&gt;Error: Could not sy
      
    
    </summary>
    
      <category term="nginx" scheme="https://yuxingxin.com/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://yuxingxin.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>前端笔记</title>
    <link href="https://yuxingxin.com/2016/11/12/vue/"/>
    <id>https://yuxingxin.com/2016/11/12/vue/</id>
    <published>2016-11-11T16:00:00.000Z</published>
    <updated>2017-02-17T01:56:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h3><p>最近整理了部分前端的技术点，可以做为初学这部分的童靴的一个学习清单：</p><ul><li>vue-router：Vue.js 官方路由。与 Vue.js 内核深度整合，让构建单页应用易如反掌。</li><li>vue-resource：通过 XMLHttpRequest 或 JSONP 发起请求并处理响应。</li><li>vue-loader：webpack下loader插件 可以把.vue文件 输出成组件</li><li>vuex：一个主要应用在中大型单页应用的类似于 Flux 的数据管理架构。它主要帮我们更好地组织代码，以及把应用内的的状态保持在可维护、可理解的状态。</li><li>vue-devtools：Chrome 开发者工具扩展，用于调试 Vue.js 应用。</li><li>ES6：包含了许多新的语言特性，它们将使JS变得更加强大，更富表现力。</li><li>webpack：一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。</li><li>gulp：一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。</li><li>less/sass/stylus： CSS 预处理器框架。</li><li>PostCSS： 提供了一个解析器，它能够将 CSS 解析成抽象语法树（AST）。</li><li>Flexbox： 让容器有能力让其子项目能够改变其宽度、高度(甚至顺序)，以最佳方式填充可用空间（主要是为了适应所有类型的显示设备和屏幕大小）</li><li>Media Query： 包含了一个媒体类型和至少一个使用如宽度、高度和颜色等媒体属性来限制样式表范围的表达式。</li></ul><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ul><li>1.实例属性、方法与代理属性、方法                    vue实例生命周期</li><li>2.插值/绑定表达式/指令(带有前缀 v- 的特性)/缩写</li><li>3.计算属性  vs $watch</li><li>4.样式绑定：对象与数组语法的用法    对象语法与计算属性的结合</li><li>5.条件渲染与列表渲染</li><li>6.方法与事件处理器                            修饰符</li><li>7.表单控件绑定</li><li>8.过渡</li><li>9.组件：数据传递/父子通信/分发内容</li><li>10.计算属性的缓存依赖</li><li>11.自定义指令/过滤器<br><strong>Tips:</strong> 受 ES5 的限制，Vue.js 不能检测到对象属性的添加或删除,可以使用 $set(key, value) 实例方法</li></ul><h3 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h3><ul><li>1.嵌套路由配置方法</li><li>2.路由对象属性以及路由的匹配规则</li><li>3.一些常见路由配置项的含义</li><li>4.配合webpack异步载入组件</li><li>5.切换钩子函数</li><li>6.路由API</li></ul><h3 id="Vue-Resource-官方现在推荐axios"><a href="#Vue-Resource-官方现在推荐axios" class="headerlink" title="Vue-Resource(官方现在推荐axios)"></a>Vue-Resource(官方现在推荐<a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">axios</a>)</h3><ul><li><ol><li>用法<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">get</span><span class="params">(url, [options])</span></span></div><div class="line"><span class="function"><span class="title">head</span><span class="params">(url, [options])</span></span></div><div class="line"><span class="function"><span class="title">delete</span><span class="params">(url, [options])</span></span></div><div class="line"><span class="function"><span class="title">jsonp</span><span class="params">(url, [options])</span></span></div><div class="line"><span class="function"><span class="title">post</span><span class="params">(url, [body], [options])</span></span></div><div class="line"><span class="function"><span class="title">put</span><span class="params">(url, [body], [options])</span></span></div><div class="line"><span class="function"><span class="title">patch</span><span class="params">(url, [body], [options])</span></span></div></pre></td></tr></table></figure></li></ol></li><li><p>2.拦截器</p></li><li>3.结合ES6</li></ul><h3 id="Vue-loader"><a href="#Vue-loader" class="headerlink" title="Vue-loader"></a>Vue-loader</h3><ul><li><p>1.vue组件编写细则</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>, <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"> and <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span></span></div></pre></td></tr></table></figure></li><li><p>2.配置文件的规则：预处理器、Loader高级配置、导出CSS文件等</p></li><li>3.带域的CSS、PostCSS 和 Autoprefixer、热加载</li><li>4.生产环境、静态检查、测试等工作流</li></ul><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><ul><li>1.一些常用的概念，State/Getters/Mutations/Actions</li><li>2.vuex工作流<br>  用户在组件中的输入操作触发 action 调用；<br>  Actions 通过分发 mutations 来修改 store 实例的状态；<br>  Store 实例的状态变化反过来又通过 getters 被组件获知。</li><li>3.一些特定规则：<br>  应用 state 存在于单个对象中；<br>  只有 mutation handlers 可以改变 state；<br>  Mutations 必须是同步的，它们做的应该仅仅是改变 state；<br>  所有类似数据获取的异步操作细节都应封装在 actions 里面。<br>  组件通过 getters 从 store 中获取 state，并通过调用 actions 来改变 state。</li></ul><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><ul><li>1.let、const   与var的区别</li><li>2.箭头函数</li><li>3.模板字符串以及增加的新的API(Math + Number + String + Array + Object APIs)</li><li>4.表达式解构</li><li>5.原生的模块化</li><li>6.类</li><li>7.对象字面量扩展语法</li><li>8.参数：默认参数、不定参数 和 重命名参数的处理</li><li>9.新的数据结构：Set 和 WeakSet      Map 和 WeakMap</li><li>10.生成器(Generator)</li><li>11.Promise</li><li>12.Symbol</li><li>13.Proxy</li></ul><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><ul><li>1.了解CommonJS和AMD的相关规范</li><li>2.代码分割及相关配置：单文件入口和多文件入口</li><li>3.内嵌样式表</li><li>4.去重、分块、压缩、混淆等相关配置及优化</li></ul><h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><ul><li>1.关于package.json配置文件</li><li>2.处理gulp任务的常用相关命令</li><li>3.熟悉gulpfile.js文件</li><li>4.掌握gulp API:   src/dest/task/watch</li><li>5.编写自定义任务，熟悉常用插件</li></ul><h3 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h3><ul><li>1.安装和编译</li><li>2.变量</li><li>3.嵌套</li><li>4.文件导入</li><li>5.混合</li><li>6.继承</li><li>7.运算符</li><li>8.函数</li><li>9.条件判断及循环</li></ul><h3 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h3><ul><li>1.水平主轴和垂直交叉轴</li><li><p>2.常用的6个容器属性</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">flex-direction</span></div><div class="line"><span class="attribute">flex-wrap</span></div><div class="line"><span class="attribute">flex-flow</span></div><div class="line"><span class="attribute">justify-content</span></div><div class="line"><span class="attribute">align-items</span></div><div class="line"><span class="attribute">align-content</span></div></pre></td></tr></table></figure></li><li><p>3.常用的6个项目属性</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">order</span></div><div class="line"><span class="attribute">flex-grow</span></div><div class="line"><span class="attribute">flex-shrink</span></div><div class="line"><span class="attribute">flex-basis</span></div><div class="line"><span class="attribute">flex</span></div><div class="line"><span class="attribute">align-self</span></div></pre></td></tr></table></figure></li><li><p>4.常见布局：骰子布局、网格布局、圣杯布局、输入框布局、悬挂式布局、固定底栏、流式布局</p></li></ul><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><ul><li>1.媒体类型(media type)/媒体特性(media feature)的表达式</li><li>2.逻辑运算符:and,逗号,not ,only</li><li>3.一些常用方法：排他（exclusive）覆盖（overriding）移动端优先（Mobile first）PC优先（desktop first）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;相关技术&quot;&gt;&lt;a href=&quot;#相关技术&quot; class=&quot;headerlink&quot; title=&quot;相关技术&quot;&gt;&lt;/a&gt;相关技术&lt;/h3&gt;&lt;p&gt;最近整理了部分前端的技术点，可以做为初学这部分的童靴的一个学习清单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vue-router：Vue
      
    
    </summary>
    
      <category term="前端" scheme="https://yuxingxin.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="notes" scheme="https://yuxingxin.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>西安GDG上《以开发者的角度再聊Material Design》的总结</title>
    <link href="https://yuxingxin.com/2016/07/17/MaterialDesign/"/>
    <id>https://yuxingxin.com/2016/07/17/MaterialDesign/</id>
    <published>2016-07-16T16:00:00.000Z</published>
    <updated>2016-08-27T02:34:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>谷歌在2014年I/O大会上推出了Material Design,旨在为手机、平板电脑、台式机和“其他平台”提供更一致、更广泛的“外观和感觉”。在国内有好几种版本的翻译：材料设计/材质设计/质感设计（官方文档）/原质设计（国内设计师更倾向于这个）。</p><h2 id="三大设计原则"><a href="#三大设计原则" class="headerlink" title="三大设计原则"></a>三大设计原则</h2><h3 id="隐喻"><a href="#隐喻" class="headerlink" title="隐喻"></a>隐喻</h3><p>通过纸墨做比，光影打造空间层次和符合客观规律的特效来隐喻表面质感、光效以及运动感。</p><h3 id="鲜明、形象、深思熟虑"><a href="#鲜明、形象、深思熟虑" class="headerlink" title="鲜明、形象、深思熟虑"></a>鲜明、形象、深思熟虑</h3><p>借鉴了传统的印刷设计，从排版、网格、空间、比例、配色、图像使用上做了精心处理，尤其对色彩、图像、字体、留白明确了规范，力求构建鲜明的用户界面。</p><h3 id="有意义的动画效果"><a href="#有意义的动画效果" class="headerlink" title="有意义的动画效果"></a>有意义的动画效果</h3><p>通过符合客观运动规律的特效效果，让物体的变化以更连续、更平滑的方式呈现给用户，从而吸引用户的注意。比如转场、触摸反馈、循环揭示等</p><p>关于界面的层次：<br><img src="/assets/images/md1.png" alt="image"></p><p>从下往上依次可以分为：</p><ul><li>界面的内容</li><li>顶部导航条 App Bar</li><li>浮动按钮  FAB</li><li>状态栏&amp;底部虚拟导航键</li><li>抽屉菜单</li><li>通知栏等系统信息</li></ul><h2 id="六大部分"><a href="#六大部分" class="headerlink" title="六大部分"></a>六大部分</h2><p>官方文档分别从动画、样式、布局、组件、模式、可用性六个方面对Material Design的设计规范进行了详细阐释。</p><p>这里主要列一些5.0以后引入的新特性：</p><h3 id="1-触控涟漪"><a href="#1-触控涟漪" class="headerlink" title="1.触控涟漪"></a>1.触控涟漪</h3><p><img src="/assets/images/md2.gif" alt="image"></p><p>首先在视图 XML 中应用此功能</p><ul><li>?android:attr/selectableItemBackground 指定有界的波纹。</li><li>?android:attr/selectableItemBackgroundBorderless 指定越过视图边界的波纹。 它将由一个非空背景的视图的最近父项所绘制和设定边界。注意这个是API21引入的新特性</li></ul><p>如果要改变默认触摸反馈颜色，可以在我们自定义的主题下面主题的添加 android:colorControlHighlight 属性。</p><p>相关类是RippleDrawable。</p><p>在drawable-v21中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:color</span>=<span class="string">"@android:color/darker_gray"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/colorAccent"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure><p>如果要兼容5.0以下版本，我们可以使用第三方开源库<a href="https://github.com/traex/RippleEffect" target="_blank" rel="external">RippleEffect</a></p><p>否则可以在drawable中定义selector指定不同的状态即可</p><h3 id="2-View状态改变动画"><a href="#2-View状态改变动画" class="headerlink" title="2. View状态改变动画"></a>2. View状态改变动画</h3><p>StateListAnimator定义当视图的状态改变的时候运行动画，如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">"translationZ"</span></span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"@android:integer/config_shortAnimTim"</span></div><div class="line">        <span class="attr">android:valueTo</span>=<span class="string">"2dp"</span></div><div class="line">        <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_enabled</span>=<span class="string">"true"</span></span></div><div class="line">    <span class="attr">android:state_pressed</span>=<span class="string">"false"</span></div><div class="line">    <span class="attr">android:state_focused</span>=<span class="string">"true"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">"translationZ"</span></span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"100"</span></div><div class="line">        <span class="attr">android:valueTo</span>=<span class="string">"0"</span></div><div class="line">        <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure><p>给视图分配动画使用android:stateListAnimator属性,代码实现可以借助AnimationInflater.loadStateListAnimator()和View.setStateListAnimator()方法。</p><ul><li>注意当你的主题是继承的Material主题，按钮默认有一个Z轴动画。如果需要避免这个动画，设置android:stateListAnimator属性为@null即可。</li></ul><p>与此相似的是animated-selector：android5.0的一些系统组件默认使用这些动画。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">animated-selector</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- provide a different drawable for each state--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/pressed"</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/drawable_pressed"</span></span></div><div class="line">        <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/focused"</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/drawable_focused"</span></span></div><div class="line">        <span class="attr">android:state_focused</span>=<span class="string">"true"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@id/default"</span></span></div><div class="line">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/drawable_default"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- specify a transition --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">android:fromId</span>=<span class="string">"@+id/default"</span> <span class="attr">android:toId</span>=<span class="string">"@+id/pressed"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">animation-list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:duration</span>=<span class="string">"15"</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/drawable1"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:duration</span>=<span class="string">"15"</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/drawable2"</span>/&gt;</span></div><div class="line">            ...</div><div class="line">        <span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">animated-selector</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="3-循环揭示"><a href="#3-循环揭示" class="headerlink" title="3.循环揭示"></a>3.循环揭示</h3><p>它提供视觉上的持续性挡显示或者隐藏一组界面元素。通过ViewAnimationUtils.createCircularReveal()方法可以使用动画效果来揭示或者隐藏一个视图。</p><p><img src="/assets/images/md3.gif" alt="image"></p><p>关键代码<br>揭示一个先前隐藏的视图</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Animator anim =</div><div class="line">    ViewAnimationUtils.createCircularReveal(myView, cx, cy, <span class="number">0</span>, finalRadius)<span class="comment">;</span></div><div class="line">myView.setVisibility(View.VISIBLE)<span class="comment">;</span></div><div class="line">anim.start()<span class="comment">;</span></div></pre></td></tr></table></figure><p>隐藏一个先前显示的视图</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Animator anim =</div><div class="line">    ViewAnimationUtils.createCircularReveal(myView, cx, cy, initialRadius, <span class="number">0</span>);</div><div class="line"></div><div class="line">anim.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAnimationEnd(animation);</div><div class="line">        myView.setVisibility(View.INVISIBLE);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">anim.start();</div></pre></td></tr></table></figure><p>针对5.0以下如果实现，可以借用第三方库：<a href="https://github.com/ozodrukh/CircularReveal" target="_blank" rel="external">CircularReveal</a></p><h3 id="共享元素转场"><a href="#共享元素转场" class="headerlink" title="共享元素转场"></a>共享元素转场</h3><p>android 5.0(api 21)提供以下进入和退出效果：</p><ul><li>explode(分解)  </li><li>slide(滑动)   </li><li>fade(淡入淡出)</li></ul><p>接下来猪脚登场,共享元素过渡效果：</p><ul><li>changeBounds - 改变目标视图的布局边界</li><li>changeClipBounds - 裁剪目标视图边界</li><li>changeTransform - 改变目标视图的缩放比例和旋转角度</li><li>changeImageTransform - 改变目标图片的大小和缩放比例</li></ul><p><img src="/assets/images/SceneTransition.png" alt="image"></p><p>首先在我们继承的主题上，使用android:windowContentTransitions属性开启窗口内内容过渡效果</p><ul><li>以共享元素启动一个操作行为</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ActivityOptionsCompat <span class="keyword">options</span> = ActivityOptionsCompat.</div><div class="line">    makeSceneTransitionAnimation(<span class="keyword">this</span>, (View)ivAvatar, <span class="string">"avatar"</span>);</div><div class="line">startActivity(intent, <span class="keyword">options</span>.toBundle());</div></pre></td></tr></table></figure><ul><li>以多个共享元素启动一个操作行为</li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Pair&lt;<span class="built_in">View</span>, <span class="keyword">String</span>&gt; p1 = Pair.<span class="keyword">create</span>((<span class="built_in">View</span>)ivProfile, <span class="string">"profile"</span>);</div><div class="line">Pair&lt;<span class="built_in">View</span>, <span class="keyword">String</span>&gt; p2 = Pair.<span class="keyword">create</span>(vPalette, <span class="string">"palette"</span>);</div><div class="line">Pair&lt;<span class="built_in">View</span>, <span class="keyword">String</span>&gt; p3 = Pair.<span class="keyword">create</span>((<span class="built_in">View</span>)tvName, <span class="string">"text"</span>);</div><div class="line">ActivityOptionsCompat options = ActivityOptionsCompat.</div><div class="line">    makeSceneTransitionAnimation(this, p1, p2, p3);</div><div class="line">startActivity(intent, options.toBundle());</div></pre></td></tr></table></figure><h3 id="Scrolling-Animations"><a href="#Scrolling-Animations" class="headerlink" title="Scrolling Animations"></a>Scrolling Animations</h3><p>放到后面</p><h3 id="高度和阴影"><a href="#高度和阴影" class="headerlink" title="高度和阴影"></a>高度和阴影</h3><p><img src="/assets/images/md4.png" alt="image"></p><p>Z = elevation + translationZ</p><p>主要借助elevation属性</p><h3 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h3><p>利用 Android 5.0（API 级别 21）及更高版本,可为位图以及定义为 Alpha 蒙版的点九图着色，主要借助android:tint 以及 android:tintMode 属性设置您的布局中的着色颜色和模式。</p><h3 id="裁剪视图"><a href="#裁剪视图" class="headerlink" title="裁剪视图"></a>裁剪视图</h3><p><img src="/assets/images/md5.png" alt="image"></p><ul><li>扩展 ViewOutlineProvider 类别。</li><li>重写 getOutline() 方法。</li><li>利用 View.setOutlineProvider() 方法设置轮廓。</li></ul><h3 id="矢量图片添加动画"><a href="#矢量图片添加动画" class="headerlink" title="矢量图片添加动画"></a>矢量图片添加动画</h3><p>先是xml文件，对应类是VectorDrawable<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">     <span class="attr">android:height</span>=<span class="string">"64dp"</span></div><div class="line">     <span class="attr">android:width</span>=<span class="string">"64dp"</span></div><div class="line">     <span class="attr">android:viewportHeight</span>=<span class="string">"600"</span></div><div class="line">     <span class="attr">android:viewportWidth</span>=<span class="string">"600"</span> &gt;</div><div class="line">     <span class="tag">&lt;<span class="name">group</span></span></div><div class="line">         <span class="attr">android:name</span>=<span class="string">"rotationGroup"</span></div><div class="line">         <span class="attr">android:pivotX</span>=<span class="string">"300.0"</span></div><div class="line">         <span class="attr">android:pivotY</span>=<span class="string">"300.0"</span></div><div class="line">         <span class="attr">android:rotation</span>=<span class="string">"45.0"</span> &gt;</div><div class="line">         <span class="tag">&lt;<span class="name">path</span></span></div><div class="line">             <span class="attr">android:name</span>=<span class="string">"v"</span></div><div class="line">             <span class="attr">android:fillColor</span>=<span class="string">"#000000"</span></div><div class="line">             <span class="attr">android:pathData</span>=<span class="string">"M300,70 l 0,-70 70,70 0,0 -70,70z"</span> /&gt;</div><div class="line">     <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">vector</span>&gt;</span></div></pre></td></tr></table></figure></p><p>设置drawable，对应类是AnimatedVectorDrawable<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">animated-vector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">   <span class="attr">android:drawable</span>=<span class="string">"@drawable/vectordrawable"</span> &gt;</div><div class="line">     <span class="tag">&lt;<span class="name">target</span></span></div><div class="line">         <span class="attr">android:name</span>=<span class="string">"rotationGroup"</span></div><div class="line">         <span class="attr">android:animation</span>=<span class="string">"@anim/rotation"</span> /&gt;</div><div class="line">     <span class="tag">&lt;<span class="name">target</span></span></div><div class="line">         <span class="attr">android:name</span>=<span class="string">"v"</span></div><div class="line">         <span class="attr">android:animation</span>=<span class="string">"@anim/path_morph"</span> /&gt;</div><div class="line"> <span class="tag">&lt;/<span class="name">animated-vector</span>&gt;</span></div></pre></td></tr></table></figure></p><p>上面是使用了两个属性动画，对应类是ObjectAnimator</p><p>其中旋转动画和变形动画：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">objectAnimator</span>  </span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:duration</span>=<span class="string">"6000"</span>  </div><div class="line">    <span class="attr">android:propertyName</span>=<span class="string">"rotation"</span>  </div><div class="line">    <span class="attr">android:valueFrom</span>=<span class="string">"0"</span>  </div><div class="line">    <span class="attr">android:valueTo</span>=<span class="string">"360"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">objectAnimator</span>  </span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:duration</span>=<span class="string">"3000"</span>  </div><div class="line">    <span class="attr">android:propertyName</span>=<span class="string">"pathData"</span>  </div><div class="line">    <span class="attr">android:valueFrom</span>=<span class="string">"M300,70 l 0,-70 70,70 0,0   -70,70z"</span>  </div><div class="line">    <span class="attr">android:valueTo</span>=<span class="string">"M300,70 l 0,-70 70,0  0,140 -70,0 z"</span>  </div><div class="line">    <span class="attr">android:valueType</span>=<span class="string">"pathType"</span>/&gt;</div></pre></td></tr></table></figure></p><h3 id="从图像萃取颜色"><a href="#从图像萃取颜色" class="headerlink" title="从图像萃取颜色"></a>从图像萃取颜色</h3><p>如果要萃取这些颜色，可以通过如下函数：</p><p><img src="/assets/images/md6.png" alt="image"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Palette</span><span class="selector-class">.from</span>(<span class="selector-tag">bitmap</span>)<span class="selector-class">.generate</span>()</div><div class="line"><span class="selector-tag">Palette</span><span class="selector-class">.generateAsync</span>(<span class="selector-tag">bitmap</span>,<span class="selector-tag">paletteAsyncListener</span>)</div></pre></td></tr></table></figure><p>然后可以通过 Palette.getVibrantColor方法获取色值</p><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>颜色不宜过多。选取一种主色、一种辅助色（非必需），在此基础上进行明度、饱和度变化，构成配色方案。(<a href="https://www.materialpalette.com" target="_blank" rel="external">https://www.materialpalette.com</a>)</p><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><p>建议模仿现实中的折纸效果，通过扁平色彩表现空间和光影。这里也推荐下这个插件：<a href="https://github.com/konifar/android-material-design-icon-generator-plugin" target="_blank" rel="external">https://github.com/konifar/android-material-design-icon-generator-plugin</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>优先使用图像。然后可以考虑使用插画。</p><h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><p>英文官方建议Roboto字体，中文推荐Noto(思源黑体)，另外官方也开源了<a href="http://fonts.google.com/" target="_blank" rel="external">字体库</a>,需翻墙</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>这里列出部分尺寸：</p><ul><li>所有可操作元素最小点击区域尺寸：48dp X 48dp。</li><li>栅格系统的最小单位是8dp，一切距离、尺寸都应该是8dp的整数倍。以下是一些常见的尺寸与距离：（推荐网格校正工具：keyline pushing）</li><li>顶部状态栏高度：24dp</li><li>Appbar最小高度：56dp</li><li>底部导航栏高度：48dp</li><li>悬浮按钮尺寸：56x56dp/40x40dp</li><li>用户头像尺寸：64x64dp/40x40dp</li><li>小图标点击区域：48x48dp</li><li>侧边抽屉到屏幕右边的距离：56dp</li><li>卡片间距：8dp</li><li>分隔线上下留白：8dp</li><li>大多元素的留白距离：16dp</li></ul><p>推荐国外开发者贡献的一个开源库：<a href="https://github.com/DmitryMalkovich/material-design-dimens" target="_blank" rel="external">https://github.com/DmitryMalkovich/material-design-dimens</a>  里面总结了一些Material Design的设计规范，另外也推荐一款网格校正工具：<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwiB17eglZvOAhVJ72MKHdcIADUQFggfMAA&amp;url=https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.faizmalkani.keylines%26hl%3Dzh_CN&amp;usg=AFQjCNFaXp2sbsfOHk8bifBkhuS38VukCw&amp;sig2=pEOMduInSxFH9v2qvjPcYw" target="_blank" rel="external">keyline pushing</a></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>这里列出来一些官方组件，可供我们开发Material Design时使用</p><ul><li>RecyclerView</li><li>CardView</li><li>DrawerLayout</li><li>NavigationView</li><li>Toolbar</li><li>FloatingActionButton</li><li>Snackbar</li><li>TextInputLayout</li><li>TextInputEditText</li><li>CoordinatorLayout</li><li>TabLayout</li><li>AppBarLayout</li><li>SwipeRefreshLayout</li><li>CollapsingToolbarLayout</li><li>BottomSheetBehavior</li><li>PercentRelativeLayout</li><li>Palette</li><li>PagerTabStrip</li><li>PagerTitleStrip</li><li>SlidingPanelLayout</li></ul><h3 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h3><p>关于RecyclerView的几点总结：</p><ul><li>RecyclerView.LayoutManager    :负责Item视图的布局的显示管理</li><li>RecyclerView.ItemDecoration    :给每一项Item视图添加子View,如加分割线等</li><li>RecyclerView.ItemAnimator:负责处理数据添加或者删除时候的动画效果</li><li>RecyclerView.Adapter:为每一项Item创建视图</li><li>RecyclerView.ViewHolder:承载Item视图的子布局</li></ul><p>与ListView的对比：</p><ul><li>RecyclerView需借助ViewHolder模式来实现Adapter</li><li>RecyclerView可以自定义Item布局：listview只能以垂直线性排列的方式来布局Item,而RecyclerView借助RecyclerView.LayoutManager可以实现多种布局，如网格、瀑布流等</li><li>Item 动画：借助RecyclerView.ItemAnimator很容易实现item动画</li><li>数据源：listview针对不同的数据源可以有不同的适配器，而RecyclerView需要借助RecyclerView.Adapter自定义实现适配器来提供数据。</li><li>Item Decoration：listview可以通过android:divider很容易实现分割线等，而RecycerView则需要借助RecyclerView.ItemDecoration</li><li>Item Click : listview可以通过AdapterView.OnItemClickListener来实现，而RecyclerView则只提供了RecyclerView.OnItemTouchListener</li></ul><h3 id="CardView"><a href="#CardView" class="headerlink" title="CardView"></a>CardView</h3><p><img src="/assets/images/md7.png" alt="image"></p><p>两个属性：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">app:</span>cardCornerRadius</div><div class="line"><span class="symbol">app:</span>cardBackgroundColor</div></pre></td></tr></table></figure><h3 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h3><p>用来替代ActionBar，可以当做一个普通的ViewGroup来使用，所以来说比前者更灵活</p><h3 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout"></a>AppBarLayout</h3><p>常作为Toolbar和其他View的父View配合CoordinatorLayout使用来实现Scrolling Animation</p><h3 id="FloatingActionButton"><a href="#FloatingActionButton" class="headerlink" title="FloatingActionButton"></a>FloatingActionButton</h3><p>浮动Button,也可以加入二级菜单</p><h3 id="Snackbar"><a href="#Snackbar" class="headerlink" title="Snackbar"></a>Snackbar</h3><p>带有动作的Toast</p><h3 id="TabLayout"><a href="#TabLayout" class="headerlink" title="TabLayout"></a>TabLayout</h3><p>常和ViewPager搭配使用，比较方便</p><h3 id="CoordinatorLayout-Behavior"><a href="#CoordinatorLayout-Behavior" class="headerlink" title="CoordinatorLayout.Behavior"></a>CoordinatorLayout.Behavior</h3><p>CoordinatorLayout是一个比较重要的类，大致主要分这几点：</p><ul><li>一个抽象内部类</li><li>利用泛型是指定我们应用这个Behavior的view的类型</li><li>自定义Behavior：某个View监听另一个view的状态变化，例如大小、位置、显示状态等：layoutDependendsOn和onDependentViewChanged方法；</li><li>某个view监听CoordinatorLayout里的滑动状态：onStartNestedScroll和onNestedPreScroll方法。</li><li>CoordinatorLayout 所做的事情就是当成一个通信的 桥梁 ，连接不同的view。使用 Behavior 对象进行通信。</li></ul><p>两个常见用例：</p><ul><li>CoordinatorLayout与悬浮操作按钮</li></ul><ol><li><p>CoordinatorLayout是用来协调其子view们之间动作的一个父view，而Behavior就是用来给CoordinatorLayout的子view们实现交互的。</p></li><li><p>FloatingActionButton作为一个子View添加进CoordinatorLayout并且将CoordinatorLayout传递给 Snackbar.make()</p></li></ol><ul><li>CoordinatorLayout与app bar</li></ul><ol><li><p>使用AppBarLayout可以让你的Toolbar与其他view（比如TabLayout的选项卡）能响应被标记了ScrollingViewBehavior的View的滚动事件</p></li><li><p>这里使用了CollapsingToolbarLayout的app:layout_collapseMode=”pin”来确保Toolbar在view折叠的时候仍然被固定在屏幕的顶部。借助app:layout_collapseMode=”parallax”（以及使用app:layout_collapseParallaxMultiplier=”0.7”来设置视差因子）来实现视差滚动效果（比如CollapsingToolbarLayout里面的一个ImageView），这种情况和CollapsingToolbarLayout的app:contentScrim=”?attr/colorPrimary”属性一起配合更完美。</p></li></ol><p>总结：</p><ul><li>CoordinatorLayout必须作为整个布局的父布局容器。</li><li>给需要滑动的组件设置 app:layout_scrollFlags=”scroll|enterAlways” 属性。</li><li>给你的可滑动的组件，也就是RecyclerView 或者 NestedScrollView 设置如下属性:app:layout_behavior = @string/appbar_scrolling_view_behavior</li><li>给需要有折叠效果的组件设置 layout_collapseMode属性。</li></ul><h3 id="Chris-Banes"><a href="#Chris-Banes" class="headerlink" title="Chris Banes"></a>Chris Banes</h3><p>android.support:design库作者</p><p>github: <a href="https://github.com/chrisbanes" target="_blank" rel="external">https://github.com/chrisbanes</a><br>google+: <a href="https://plus.google.com/+ChrisBanes" target="_blank" rel="external">https://plus.google.com/+ChrisBanes</a><br>twitter: <a href="https://twitter.com/chrisbanes" target="_blank" rel="external">https://twitter.com/chrisbanes</a><br>blog: <a href="http://chris.banes.me/" target="_blank" rel="external">http://chris.banes.me/</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>阴影：android:elevation 和 android:translationZ</p></li><li><p>调色：通过android:colorPrimary 和 android:colorAccent、Palette萃取等</p></li><li><p>图标：使用遵循material design spec的icon</p></li><li><p>尺寸：注意8dp的整数倍</p></li><li><p>动效：波纹动画、循环揭示、共享元素转场、滑动、SVG动画等</p></li><li><p>组件：FAB、Appbar、Tabs、Cards、Lists等</p></li></ul><h2 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h2><h3 id="样式与布局兼容"><a href="#样式与布局兼容" class="headerlink" title="样式与布局兼容"></a>样式与布局兼容</h3><blockquote><p>可以写对应的样式文件和布局文件</p><ul><li>res/values/styles.xml.</li><li>res/values-v21/styles.xml.</li><li>res/layout/my_activity.xml</li><li>res/layout-v21/my_activity.xml</li></ul></blockquote><h3 id="使用支持库提供的组件"><a href="#使用支持库提供的组件" class="headerlink" title="使用支持库提供的组件"></a>使用支持库提供的组件</h3><h3 id="使用兼容的主题：Theme-AppCompat"><a href="#使用兼容的主题：Theme-AppCompat" class="headerlink" title="使用兼容的主题：Theme.AppCompat"></a>使用兼容的主题：Theme.AppCompat</h3><blockquote><p>以下组件可以借助兼容主题来实现已有样式</p><ul><li>EditText</li><li>Spinner</li><li>CheckBox</li><li>RadioButton</li><li>SwitchCompat</li><li>CheckedTextView</li></ul></blockquote><h3 id="调色板"><a href="#调色板" class="headerlink" title="调色板"></a>调色板</h3><p><img src="/assets/images/md8.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"android:Theme.Material"</span>&gt;</span><span class="xml"></span></div><div class="line">   <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorPrimary"</span>&gt;</span>@color/primary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorPrimaryDark"</span>&gt;</span>@color/primary_dark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorAccent"</span>&gt;</span>@color/accent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="使用第三方组件库"><a href="#使用第三方组件库" class="headerlink" title="使用第三方组件库"></a>使用第三方组件库</h3><h3 id="自己造轮子"><a href="#自己造轮子" class="headerlink" title="自己造轮子"></a>自己造轮子</h3><p>先<a href="http://developer.android.com/design/material/index.html" target="_blank" rel="external">熟悉API</a>，再查看官方设计指南，利用现有API进行封装</p><h2 id="Best-In-Class-Android-Design"><a href="#Best-In-Class-Android-Design" class="headerlink" title="Best-In-Class Android Design"></a>Best-In-Class Android Design</h2><p>Material Design团队整理的Google Play上比较好的MD风格的App</p><p><img src="/assets/images/md9.png" alt="image"></p><p><a href="https://play.google.com/store/apps/collection/promotion_3001769_io_awards" target="_blank" rel="external">https://play.google.com/store/apps/collection/promotion_3001769_io_awards</a></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>这次的PPT<a href="https://pan.baidu.com/s/1dFLqrs9" target="_blank" rel="external">下载地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;谷歌在2014年I/O大会上推出了Material Design,旨在为手机、平板电脑、台式机和“其他平台”提供更一致、更广泛的“外观和感觉
      
    
    </summary>
    
      <category term="Material Design总结" scheme="https://yuxingxin.com/categories/Material-Design%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Material Design" scheme="https://yuxingxin.com/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>从Android Studio来谈开发工具</title>
    <link href="https://yuxingxin.com/2016/03/01/AndroidStudio/"/>
    <id>https://yuxingxin.com/2016/03/01/AndroidStudio/</id>
    <published>2016-02-29T16:00:00.000Z</published>
    <updated>2016-04-09T03:08:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>不得不说这是一个老生常谈的话题，从我们开始学习一门新语言或者接触一个新的开发平台，面临的第一个问题就是开发工具的选择与熟悉，写这个话题一方面是MDG第一篇总结，另一方面也是知乎上一个用户问的一个问题，他想让我推荐一本以Android Studio(后面都简称as)为开发工具的Android入门书籍，其实做久了Android的都知道，网上讲解as的系列文章有很多（我把不错的都列在文章结尾），然后呢，Android入门书籍也有很多，其中大家公认的郭神的《第一行代码》算是经典，但是这本书写的比较早，里面的代码所用的开发工具还都基于eclipse,然后这对于我们新进入Android开发领域的同学似乎有点犯难了，总觉得有本两者结合的书那该有多好。其实这些都无可厚非，这篇文章想从Android Studio下手（当然我会挑常用的来列）来聊聊开发工具的一些琐碎的东西。</p><p>不得不说我是一个JetBrains公司的超级粉，从Web开发的IntelliJ IDEA到前端开发的WebStorm,从Python开发的PyCharm到Android开发的as（基于JetBrains的IntelliJ IDEA Community Edition），从我一开始学习了其中一个，然后切换到其他任何一个，其实都不是很困难，因为他们有很多相似的地方。这里先不谈这些，言归正传：我把开发工具的熟悉呢分为三个方面：代码编辑、编译调试、发布部署，这也是按照我们项目开发的流程来的。在说这个之前，可能有必要提下它与eclipse的工程区别：</p><ul><li>as是单个工程的开发模式；其实JetBrains公司的其它几款产品也有类似开发模式。</li><li>as中的application相当于eclispe中的workspace</li><li>as中的module相当于eclipse中的project</li></ul><h3 id="1-关注Tips"><a href="#1-关注Tips" class="headerlink" title="1. 关注Tips"></a>1. 关注Tips</h3><p>如果你在第一次打开之后设置了不再显示，也没有关系，可以从菜单——&gt;Help——&gt;Tip of the day中找到:</p><p><img src="/assets/images/tips.png" alt="image"></p><p>另外值得一提的是，国外开发者整理的Tips库<a href="https://github.com/pavlospt/Android-Studio-Tips-by-Philippe-Breault" target="_blank" rel="external">Android-Studio-Tips-by-Philippe-Breault</a></p><h3 id="2-Android-Studio项目目录"><a href="#2-Android-Studio项目目录" class="headerlink" title="2. Android Studio项目目录"></a>2. Android Studio项目目录</h3><p>关于项目目录的一些菜单,如下图这部分：</p><p><img src="/assets/images/nav1.png" alt="image"> <img src="/assets/images/nav.png" alt="image"></p><ul><li>文件和导航关联<br>我们在写代码的时候经常需要打开某个文件的时候，想在左边的文件树上自动打开关联到位置，这样很方便的找寻本目录下的其他文件或者其他的相关文件，AS提供了这几种方案：</li></ul><ol><li>通过点击图中红框圈住的最左边的小圆圈</li><li>通过设置勾选<code>AutoScroll to Source</code>和<code>AutoScroll from source</code></li><li>通过点击小圆圈右边的折叠导航按钮打开Navigation Bar，操作方式就是打开文件的时候，然后就会出现一个下拉，基本就是这个文件所在目录的文件列表，还可以使用上下左右的键位来选择其他目录。</li></ol><ul><li>AS针对左边项目目录提供两种视图：平铺和树状（如上图），这里有一点值得要提的是，当我们想在同一个目录下同时建立两个空文件夹时，在这两种视图模式下，记得要把<code>Hide Empty Middle Package</code> 和 <code>Compact Empty Middle Package</code>给勾掉</li><li>如果我们想在类中的成员显示在左边导航，记得勾选<code>Show Members</code></li></ul><h3 id="3-常用设置"><a href="#3-常用设置" class="headerlink" title="3. 常用设置"></a>3. 常用设置</h3><ul><li>中文乱码：找到IDE preferences -&gt; Appearance,在右侧勾选上“Override default fonts by”，然后在第一个下拉框中选择字体为“simsun”，然后apply，重启IDE，可以解决。</li><li>设置快捷键：IDE preferences -&gt; Keymap  可以选择自己喜欢的Eclipse快捷键或者其他的。当然也可以修改或者删除</li><li>设置行号：IDE preferences -&gt; Editor -&gt; General -&gt; Appearance -&gt; Show line numbers 勾选 ，然后点击应用。</li><li>设置主题：找到IDE preferences -&gt; Appearance ,右侧Theme,我自己有在用Darcula。</li><li>Eclipse工程导入AS：直接通过File -&gt; Import Project然后在弹出的对话框中选择项目，注意Project和Module的区别。</li><li>右键删除项目：我们首先需要通过在Module Setting中移除module，即在打开的对话框点击减号，然后回到项目可以发现右键菜单的delete选项。</li><li>我们只有每次引用一些类的时候必须要导包，而Studio可以通过设置自动导包:<br>到 Preferences -&gt; Editor —&gt; General -&gt; Auto Import -&gt; Java 把以下选项勾上就OK了</li></ul><p><img src="/assets/images/import.png" alt="image"> </p><h3 id="4-常用快捷键"><a href="#4-常用快捷键" class="headerlink" title="4.常用快捷键"></a>4.常用快捷键</h3><table><thead><tr><th>操作</th><th>Mac OSX</th><th>Win/Linux</th></tr></thead><tbody><tr><td>注释代码(//)</td><td>Cmd + /</td><td>Ctrl + /</td></tr><tr><td>注释代码(/**/)</td><td>Cmd + Option + /</td><td>Ctrl + Shift + /</td></tr><tr><td>格式化代码</td><td>Cmd + Option + L</td><td>Ctrl + Alt + L</td></tr><tr><td>清除无效包引用</td><td>Option + Control + O</td><td>Alt + Ctrl + O</td></tr><tr><td>查找</td><td>Cmd + F</td><td>Ctrl + F</td></tr><tr><td>查找+替换</td><td>Cmd + R</td><td>Ctrl + R</td></tr><tr><td>上下移动代码</td><td>Option + Shift + Up/Down</td><td>Alt + Shift + Up/Down</td></tr><tr><td>删除行</td><td>Cmd + Delete</td><td>Ctrl + Y</td></tr><tr><td>扩大缩小选中范围</td><td>Option + Up/Down</td><td>Ctrl + W/Ctrl + Shift + W</td></tr><tr><td>快捷生成结构体</td><td>Cmd + Option + T</td><td>Ctrl + Alt + T</td></tr><tr><td>快捷覆写方法</td><td>Cmd + O</td><td>Ctrl + O</td></tr><tr><td>快捷定位到行首/尾</td><td>Cmd + Left/Right</td><td>Ctrl + Left/Right</td></tr><tr><td>折叠展开代码块</td><td>Cmd + Plus,Minus</td><td>Ctrl + Plus/Minus</td></tr><tr><td>折叠展开全部代码块</td><td>Cmd + Shift + Plus,Minus</td><td>Ctrl + Shift + Plus,Minus</td></tr><tr><td>文件方法结构</td><td>Cmd + F12</td><td>Ctrl + F12</td></tr><tr><td>查找调用的位置</td><td>Ctrl + Option + H</td><td>Ctrl + Alt + H</td></tr><tr><td>大小写转换</td><td>Cmd + Shift + U</td><td>Ctrl + Shift + U</td></tr></tbody></table><h3 id="5-Gradle基础"><a href="#5-Gradle基础" class="headerlink" title="5. Gradle基础"></a>5. Gradle基础</h3><p>先来看项目结构：</p><ul><li>src/main/            //源代码</li><li>src/androidTest/     //测试代码</li></ul><p>源代码下面：</p><ul><li>java/          //Java代码</li><li>resources/    //资源文件</li></ul><p>另外还有针对Android特有的文件和文件夹：</p><ul><li>AndroidManifest.xml</li><li>res/</li><li>assets/</li><li>aidl/</li><li>rs/</li><li>jni/</li><li>jniLibs/</li></ul><p>对于旧工程不满足默认的项目工程目录，所以我们还需要灵活配置，让它们重新映射到新的资源文件或者文件夹里面：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    sourceSets &#123;</div><div class="line">        main &#123;</div><div class="line">            manifest<span class="selector-class">.srcFile</span> <span class="string">'AndroidManifest.xml'</span></div><div class="line">            java<span class="selector-class">.srcDirs</span> = [<span class="string">'src'</span>]</div><div class="line">            resources<span class="selector-class">.srcDirs</span> = [<span class="string">'src'</span>]</div><div class="line">            aidl<span class="selector-class">.srcDirs</span> = [<span class="string">'src'</span>]</div><div class="line">            renderscript<span class="selector-class">.srcDirs</span> = [<span class="string">'src'</span>]</div><div class="line">            res<span class="selector-class">.srcDirs</span> = [<span class="string">'res'</span>]</div><div class="line">            assets<span class="selector-class">.srcDirs</span> = [<span class="string">'assets'</span>]</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        androidTest.setRoot(<span class="string">'tests'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h4><p>通常情况下任务约定由assemble(编译)、check(检查)、build(构建)、clean(清理)  其中build包含了assemble和check</p><p>Build Types:<br>默认Android plugin提供了debug和release两个构建变量，当然，我们同时也可以自定义构建变量，如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">android </span>&#123;</div><div class="line">    <span class="keyword">buildTypes </span>&#123;</div><div class="line">        <span class="built_in">debug</span> &#123;</div><div class="line">            applicationIdSuffix <span class="string">".debug"</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">jnidebug </span>&#123;</div><div class="line">            initWith(<span class="keyword">buildTypes.debug)</span></div><div class="line">            applicationIdSuffix <span class="string">".jnidebug"</span></div><div class="line">            <span class="keyword">jniDebuggable </span>true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面新建了一个jnidebug的构建变量，另外为了保证可以安装在同一个设备上，我们这里修改了他们的applicationId，即加上分别加上后缀’.debug’和’.jnidebug’，另外通过initWith方法来指定jniDebug是从debug这个基础上的一个副本，然后通过jniDebuggable配置来启用JNI组件的构建调试。</p><p>除此之外，我们也可以用构建变量添加指定的代码和资源文件，对于每个构建变量，在一个新的sourceSet被创建后，它都有一个默认位置：<code>src/&lt;buildtypename&gt;</code>,如：<code>src/debug/java</code> 目录，它可以用来放只在编译debug APK时才会被编译的代码，这也就意味着构建变量名字不能是<code>main</code>或者<code>androidTest</code>（插件强制的），它们必须是独一无二的。</p><p>像其他源码集一样，它可以被重新定位：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    sourceSets<span class="selector-class">.jnidebug</span><span class="selector-class">.setRoot</span>(<span class="string">'foo/jnidebug'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当然，对应我们也会生成一个新的assembleJnidebug任务，它和默认的debug/release一样。</p><h4 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h4><p>签名一个App需要下面这几样：</p><ul><li>A keystore</li><li>A keystore password</li><li>A key alias name</li><li>A key password</li><li>The store type</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h3&gt;&lt;p&gt;不得不说这是一个老生常谈的话题，从我们开始学习一门新语言或者接触一个新的开发平台，面临的第一个问题就是开发工具的选择与熟悉，写这个话
      
    
    </summary>
    
      <category term="Android总结" scheme="https://yuxingxin.com/categories/Android%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Android Studio" scheme="https://yuxingxin.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>新的一年，每一天都在努力为明天，记新年开篇</title>
    <link href="https://yuxingxin.com/2016/02/25/NewYearPlanSummary/"/>
    <id>https://yuxingxin.com/2016/02/25/NewYearPlanSummary/</id>
    <published>2016-02-24T16:00:00.000Z</published>
    <updated>2016-02-25T14:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>早就计划写这篇文章了，可是没想到过完年来白天晚上一直忙，刚刚工作搭档说晚上有事，今晚不加班，于是就回来补上了这篇文章，虽现在是自由职业，却发现比上班还忙，我每天还照常和上班族一样赶着清晨的第一缕阳光一路走着来到年前的办公室开始这一天的工作。说起过去的一年，MobDevGroup（以下都缩写为MDG）是我花时间最多的一个站，从最初的想法，把浏览器书签整理，到后面越来越多的文章加进来，以至于把我的印象笔记也塞的满满的，不方便查找可能是我一开始的初衷，于是如网站那样分了工具、设计、开发这几块，然后每一个版块下面又分了好多子块，归根结底其实还是想通过分类好找一点，但随着关注的人多了，压力一下子大了起来，很多朋友通过各种方式都给我提了许多建议，说来惭愧，的确是一个人精力有限，也只能部分采纳（不过建议真的都是不错的，这里真希望更多愿意分享的移动开发朋友加入进来经营这个），我从中大概总结了几点想法通过这篇文章分享出来，这也是我在过年假期期间一直在琢磨的一个问题。</p><p>如果你看过MDG的话，你会发现有一个问题就是知识点比较零散，不系统，尽管它分过类，我也大概了解关注公众号的用户，可能很多基础知识都不是太牢固，包括我在内对于不常用到的知识点一下子也是很陌生，所以今年我想尽可能的把MDG重点放在系统的构建知识点上面，年前关注MDG的同学可能看到我通过公众平台和MDG微博放的几张图，总结的开发的知识点，但是说实在这个比较老了，另外也太琐碎，所以仅供小伙伴们参考学习。于是就有了现在这个念头，同时也是帮助我自己建立知识体系。移动开发领域已经有很多优秀的公众号（后面我会列举一些我关注的），他们每天都会在上面发布一些不错的技术，有总结，有黑科技、有新技术资讯等等，一个人精力有限，所以我想既然有这么多人都在做了，我就默默关注学习吧，而MDG就换个角度来做一些可以构建基础知识体系的知识点总结吧，虽比不上大神们的公众号，不过出发点是更加系统的学习移动开发技术，从这一点来讲，我会尽力做好它。</p><p>过年一直琢磨的这几点，我把它列了出来：</p><ul><li>构建开发的基础知识体系，或许你在MDG文章分类能看到这点，不过这次想以原创文章的方式来总结，时间可能会长一点，但没关系，来日方长嘛。</li><li>Q&amp;A问与答，大体是列一些平时学习过程中常见的问题及解决办法，并总结出来，有这个想法还是我去年看的一本书《App研发录：架构设计、Crash分析和竞品技术分析》,作者对于Crash异常的整理与分析不得不让人竖起大拇指，很少会有人这么去写书，因为这个工作可能需要耗费很多精力来做，同时也更需要平时不断的积累。</li><li>开源库，这个其实在我们开发过程中已经离不开了，它可以极大的提高我们的开发效率，所以很有必要学习它，大体是从开源库子版块选择有代表性的去做专题。</li><li>辅助开发的资源，也是以文章总结的形式列出来，除了MDG上列出的分类外，比如还可以是我们平时用的软件、看的书籍、关注的App应用、优秀的微信公众号、更可以扩展到kindle帮助阅读的一些使用技巧，浏览器辅助插件，程序员的一些健康注意事项，总之都是围绕我们这一行的做一些总结。</li></ul><p>这里还是有必要列一下之前我在博客中提到的一些资源：</p><ul><li>官网或者官方视频</li><li>开源社区（GitHub、Git@OSC等）</li><li>技术分享站(掘金、开发者头条、极客头条等)</li><li>订阅开发者博客及开发者周报</li><li>关注开发者微信公众号</li><li>关注技术问答社区（StackOverflow、SegmentFault等）</li><li>关注网络问答社区（知乎、Quora等）</li><li>关注阅读社区（Medium、简书等）</li><li>关注极客站（V2EX、reddit等）</li></ul><p>之前一直有人争议全栈，也有人问过我这方面的问题，在这里我想借用自己的经历来说下我对所谓的“全栈”看法，我一毕业就进了一家创业公司，当时还没有任何移动开发人员，更别说有人和你交流讨论了，一开始Android做起，第一个版本出来后慢慢开始有了团队，后面又经历Hybrid App的开发，iOS的移植，Web App的开发，一路走来，由于是自学，踩了不少坑，总算完成了各个平台的实现，所以我想全栈的苗头一开始都源自老板给逼的，另外还有一点，随着你业务复杂度的增加，你会发现单靠原生开发已经不能更好满足需求，这时候你各种找资料发现HTML5结合会更好，所以又要开始学前端JS，各种形形色色的前端框架，这样随着需求不断增加，你依旧不断地去一路学习。所以到这里我觉得全栈真的不是说简单地学完这个学那个，那样真的是最后什么都不精，我理解的全栈应该是<strong>根据你自己的核心业务需求来做周边一圈的技术栈，它和你专一个方向不矛盾，相反或许能为你的需求找到更好的解决方案从而更好地服务核心技术</strong>。</p><p>我们平时做客户端开发的都会有这样一个问题：就是只能做客户端，没有人给提供服务端，就懒得做了，这时候你该想要是有人给我提供服务端，我也能。。。但是记得总有这么一些人其实不这么想，用郭神的一句话“每当你在感叹，如果有这样一个东西就好了的时候，请注意，其实这是你的机会”，因为等别人接口其实是一个被动过程，更何况自己如果想做点东西，没人愿意无偿给你写后端，这时候有人可能会想到聚合数据，但这个只能是一些公共的数据服务接口，并且也有限制条件，我们何尝不自己没事琢磨点怎么弄数据呢，你之前搞过前端的对JS熟悉，是不是也可以会点Node.js做个服务端 造点假数据，如果不想造也完全可以学点Python搞一下爬虫，抓点数据过来，想写好接口再了解Restful架构，如果是考虑安全又想到认证，OAuth、加密、再不行你不是懂Http吗，延伸一下那Https呢？就这样随着你需求的扩大，你的知识体系也一直在扩展，今天还看到一个同学在群里问做Android开发的为什么要懂http、https这类问题，他觉得没有用到，其实不然。</p><p>很多时候，提出来一个词就让我们觉得特牛逼，其实我觉得不必在意这些所谓的称呼，话说现在又出来一个爆栈工程师，这个世界上大牛多了去了，真的有基本你提到的他都能全搞定，但是那类人少之又少，他们的存在或许就是让人膜拜的，让你知道这一行人外有人，天外有天。所以还是那句话围绕你的核心技术栈然后根据你的需求来扩展你的知识体系，不用太在乎学多了是负担，学多了就会不精了，这里借用代码家的那句话：“做自己喜欢的事，不用太在乎规矩”,真的是这样。</p><p>最后，我也会持续更新MDG站资源，并第一时间在MDG QQ群(Android资源分享群：104575056；iOS资源分享群：69080804；移动前端资源分享群：104575412)和MDG微博分享，我平时很少有在群里聊天的习惯，不管是加的QQ群还是微信群，另一方面也没有太多时间，基本上说话都是发一些资源在里面，所以我也建议小伙伴们把更多时间留在讨论问题上，少一点吐槽和闲扯。</p><p>在假期期间，央视财经频道播出的节目《遇见大咖》系列节目第二期里，介绍的是李彦宏，里面有一个情节是百度每年的8月8号夏日狂欢在李彦宏出场时放的背景音乐《Hall of Fame》，国内南征北战演唱的一个和它调类似的歌曲叫《我的天空》，我很喜欢里面的一句歌词：“只要我还有梦 就会看到彩虹 在我的天空”，新的一年愿更多的小伙伴找准自己未来的路并坚定的走下去，你终究会在自己的天空里看到属于你的那片彩虹。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;早就计划写这篇文章了，可是没想到过完年来白天晚上一直忙，刚刚工作搭档说晚上有事，今晚不加班，于是就回来补上了这篇文章，虽现在是自由职业，却发现比上班还忙，我每天还照常和上班族一样赶着清晨的第一缕阳光一路走着来到年前的办公室开始这一天的工作。说起过去的一年，MobDevGro
      
    
    </summary>
    
      <category term="随笔" scheme="https://yuxingxin.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="notes" scheme="https://yuxingxin.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>写在最后一个工作日的MobDevGroup新年计划</title>
    <link href="https://yuxingxin.com/2016/01/29/NewYearPlan/"/>
    <id>https://yuxingxin.com/2016/01/29/NewYearPlan/</id>
    <published>2016-01-28T16:00:00.000Z</published>
    <updated>2016-01-29T08:42:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉马上要过年了，这一年总觉得走的太快，回过头来捋一捋这一年做的东西，其实有一些还是有一点意义的，比如MobDevGroup站，真的有朋友私信我说确实帮到了他们，这也是让我觉得最欣慰的地方，今天是我工作的最后一天，早上来就开始想计划下一年的工作，以前MobDevGroup在于想做全，以致于很多地方都没有做好，新的一年我打算自己开始在专题上面下功夫，大致方向是从基础知识块、Q&amp;A(问与答)、开源库三个方面总结学习。会有相关专题的内容，比如涉及基础知识的概括，常见问题的讨论，以及项目中常用的开源库的学习等等。</p><p><img src="/assets/images/newPlan.png" alt="image"></p><p>另外在过去的一年中，也有网上朋友给我提建议就是邮件订阅和QQ群，终于在年终我把这个加上了，后续新的内容会以邮件订阅的形式发出，并在QQ群通知，也可以留意网站。</p><p>写完这个就下班了，最后提前祝小伙伴新年快乐、阖家幸福！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不知不觉马上要过年了，这一年总觉得走的太快，回过头来捋一捋这一年做的东西，其实有一些还是有一点意义的，比如MobDevGroup站，真的有朋友私信我说确实帮到了他们，这也是让我觉得最欣慰的地方，今天是我工作的最后一天，早上来就开始想计划下一年的工作，以前MobDevGrou
      
    
    </summary>
    
      <category term="随笔" scheme="https://yuxingxin.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="notes" scheme="https://yuxingxin.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>西安GDG上关于主题[当Android遇上RxJava]的分享总结</title>
    <link href="https://yuxingxin.com/2016/01/10/XianGDGShare/"/>
    <id>https://yuxingxin.com/2016/01/10/XianGDGShare/</id>
    <published>2016-01-09T16:00:00.000Z</published>
    <updated>2016-01-11T06:50:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1月10号这一天，也是值得高兴的日子，一大早起来打开手机看到《RxJava Essentials》一书的作者Ivan.Morgillo给我在推特上发的消息点赞并转发后关注了我，这让我激动不已，可能对于我这种没见过大世面的人来说，这点小事或许就足以让我自己心里乐上三天。然后就是昨天下午在西安GDG做了关于RxJava的分享，这也圆了我的梦想，当我还是初生牛犊的时候，就不断的听到GDG这个词，心里就梦想着哪一天也能站在上面讲一次，果不其然，一次偶然的机会就真应了习大大新年贺词的那句话：“只要坚持,梦想总是可以实现的”，可能对于我这种喜欢Google的开发者来说，在GDG做一次分享真是莫大的荣幸与荣耀。</p><p>##分享内容总结</p><p>大致分为以下三个主题线：</p><ul><li>1.介绍了ReactiveX、RxJava</li><li>2.Android开发中遇到的常见场景</li><li>3.关于RxJava与Android的学习</li></ul><h3 id="ReactiveX的介绍"><a href="#ReactiveX的介绍" class="headerlink" title="ReactiveX的介绍"></a>ReactiveX的介绍</h3><p>我把它总结为以下三点：</p><ul><li>1.扩展的观察者模式：通过订阅可观测对象的序列流然后做出反应。</li><li>2.迭代器模式：对对象序列进行迭代输出从而使订阅者可以依次对其处理。</li><li>3.函数式编程思想：简化问题的解决的步骤，让你的代码更优雅和简洁</li></ul><p>然后介绍了ReactiveX在各个语言和平台上的实现,<a href="http://reactivex.io/languages.html" target="_blank" rel="external">官方地址</a><br>最后对上面三点展开进行详细介绍：</p><ul><li>1.先介绍GoF书中的观察者模式，被观察者发出事件，然后观察者（事件源）订阅然后进行处理。并指出其中的不足：比如观察者不知道是否出错与完成，还有就是整个过程是同步，会阻塞线程，从而引出所谓的“扩展”的观察者模式，除了提到的不足作为补充外，另外还有一点：如果没有观察者，被观察者是不会发出任何事件的。</li><li>2.迭代器模式：提供一种方法顺序访问一个聚合对象中的各种元素,而又不暴露该对象的内部表示，用《RxJava Essentials》一书做的的对比：迭代器模式在事件处理上采用的是“同步/拉式”的方式，而被观察者采用的是“异步/推式”的方式，而对观察者而言，显然后者更灵活。</li><li>3.对于函数式编程举例展示了代码风格的不同。</li></ul><h3 id="RxJava的介绍"><a href="#RxJava的介绍" class="headerlink" title="RxJava的介绍"></a>RxJava的介绍</h3><p>我也按照三点作为介绍</p><ul><li>1.RxJava的核心</li><li>2.RxJava操作符</li><li>3.RxJava的扩展</li></ul><p>然后对这三点展开来讲，其中最花时间的也是这一部分。</p><h4 id="RxJava的核心对象"><a href="#RxJava的核心对象" class="headerlink" title="RxJava的核心对象"></a>RxJava的核心对象</h4><p>先是通过一个<code>Hello World</code>的例子介绍了几个容易混淆的类/接口：</p><ul><li>Observable</li><li>OnSubscribe</li><li>Observer</li><li>Subscription</li><li>Subscriber</li></ul><p>代码展示如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; myObservable = Observable</div><div class="line">        .create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">                subscriber.onNext(<span class="string">"Hello World!"</span>);</div><div class="line">                subscriber.onCompleted();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">Subscriber&lt;String&gt; mySubscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"基础写法："</span>, s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">myObservable.subscribe(mySubscriber);</div></pre></td></tr></table></figure></p><p>简化一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; myObservable = Observable.just(<span class="string">"Hello World!"</span>);</div><div class="line"></div><div class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.v(<span class="string">"Action1简化后:"</span>, s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">myObservable.subscribe(onNextAction);</div></pre></td></tr></table></figure></p><p>匿名函数写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"Hello World!"</span>).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.v(<span class="string">"匿名函数写法："</span>,s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p><p>最后用Java 8 lambdas(Retrolambda)表达式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"Hello World!"</span>).subscribe(s -&gt; Log.v(<span class="string">"lambdas写法"</span>,s));</div></pre></td></tr></table></figure></p><p>其中这一部分从源码角度简单概括了从被观察者创建，到观察者创建，最后再订阅的过程，并顺便指出了上面几个易混淆的类/接口之间的关系。</p><p>第二部分是关于异步的话题：</p><p>先是介绍这几种调度器：</p><ul><li>1.Schedulers.immediate()</li><li>2.Schedulers.newThread()</li><li>3.Schedulers.trampoline()</li><li>4.Schedulers.io()</li><li>5.Schedulers.computation()</li><li>6.AndroidSchedulers.mainThread()</li></ul><p>然后就是两个操作符：</p><ul><li>subscribeOn()：指定 subscribe() 所发生的线程，事件产生的线程</li><li>observeOn()：指定 Subscriber 所运行在的线程，事件消费的线程</li></ul><h4 id="RxJava操作符"><a href="#RxJava操作符" class="headerlink" title="RxJava操作符"></a>RxJava操作符</h4><p>在讲操作符之前，先是介绍了直观有趣的宝石图：这里引用了一张官方的<a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">图片</a>,另外再附上一个国外程序员创建的动态的宝石图<a href="http://rxmarbles.com/" target="_blank" rel="external">网站</a>，虽然不全，但是作者一直在更新，相信后面会有更多，这有助于我们来理解操作符。</p><p>大致分为这几类展开介绍：</p><ul><li>创建操作符：Create, Defer, From, Interval, Just, Range, Repeat, Timer等。</li><li>变换操作符：Map、FlatMap、ConcatMap等。</li><li>过滤操作符：Debounce, Distinct, ElementAt, Filter, First, Last, Sample, Skip, SkipLast, Take, TakeLast等。</li><li>合买操作符以及自定义操作符。</li></ul><p>最后用一个例子做了下总结，需求如下：</p><ul><li>将一个为数字的字符串数组元素转换为数字</li><li>过滤掉大于10的数字</li><li>去重</li><li>取最后面3个元素</li><li>累计求和</li></ul><p>用代码实现就是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String[] numbers = &#123;<span class="string">"11"</span>, <span class="string">"2"</span>, <span class="string">"2"</span>, <span class="string">"13"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>,<span class="string">"7"</span>&#125;;</div><div class="line">Observable.from(numbers)</div><div class="line">        .map(s -&gt; Integer.parseInt(s))</div><div class="line">        .filter(i -&gt; i &lt; <span class="number">10</span>)</div><div class="line">        .distinct()</div><div class="line">        .takeLast(<span class="number">3</span>)</div><div class="line">        .reduce((number1,number2) -&gt; number1 + number2)</div><div class="line">        .subscribe(i -&gt; System.out.println(i));</div></pre></td></tr></table></figure></p><p>其中创建操作符例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String[] strings = &#123;<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"赵六"</span>&#125;;</div><div class="line">Observable.from(strings)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.i(<span class="string">"name"</span>, s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p><p>变换操作符例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUserName</span><span class="params">(String userName)</span></span>&#123;</div><div class="line">    textView.setText(userName);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUserName</span><span class="params">(String userName)</span></span>&#123;</div><div class="line">    Observable.just(userName).subscribe( <span class="keyword">new</span>  Action1&lt;String&gt;()&#123;</div><div class="line">             <span class="meta">@Override</span></div><div class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span></span>&#123;</div><div class="line">                textView.setText(s);</div><div class="line">            &#125;</div><div class="line">    &#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果需要在显示前对这个字符串做处理，然后再展示，比如加“张三，你好”</p><ul><li>方法1：我们可以对字符串本身操作   (不合适)</li><li>方法2：我们可以放到Action1.call()方法里做处理   （不合适）</li><li>方法3：使用操作符做变换：map    （RxJava的做法）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUserName</span><span class="params">(String userName)</span></span>&#123;</div><div class="line">    Observable.just(userName).map(<span class="keyword">new</span> Func1&lt;String,String&gt;()&#123;</div><div class="line">          <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String text)</span></span>&#123;</div><div class="line">             <span class="keyword">return</span> handleUserName(text);   </div><div class="line">           &#125;</div><div class="line">    &#125;).subscribe( <span class="keyword">new</span> Action1&lt;String&gt;()&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span></span>&#123;</div><div class="line">            textView.setText(s);</div><div class="line">          &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>关于flatMap()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打印出中国的所有省份名称。</span></div><div class="line">List&lt;Province&gt;  provinceList = …</div><div class="line">Observable.from(provinceList)</div><div class="line">    .map(<span class="keyword">new</span> Func1&lt;Province,String&gt;()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Province province)</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> province.getName();</div><div class="line">        &#125;</div><div class="line">    &#125;).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;()&#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span></span>&#123;</div><div class="line">            Log.i(“省份名称”,s)</div><div class="line">         &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打印出中国每个省份的所有城市  (不合适)</span></div><div class="line">List&lt;Province&gt;  provinceList = …</div><div class="line">Observable.from(provinceList)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Province&gt;()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Province province)</span></span>&#123;</div><div class="line">            List&lt;City&gt; cities = province.getCities();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cities.size(); i++) &#123;</div><div class="line">                   City city = cities.get(i);</div><div class="line">                   Log.i(“城市”, city.getName());</div><div class="line">            &#125;        </div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//RxJava做法</span></div><div class="line">List&lt;Province&gt;  provinceList = …</div><div class="line">Observable.from(provinceList)</div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;Province,Observable&lt;City&gt;&gt;()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;City&gt; <span class="title">call</span><span class="params">(Province province)</span></span>&#123;</div><div class="line">                 <span class="keyword">return</span> Observable.from(province.getCities());</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;City&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(City city)</span></span>&#123;</div><div class="line">               Log.i(“城市”, city.getName());       </div><div class="line">            &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><p>关于flatMap的应用扩展<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//介绍回调地狱</span></div><div class="line">restAdapter.getApiService().getToken(<span class="keyword">new</span> Callback&lt;String&gt;()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">success</span><span class="params">(String token)</span> </span>&#123;</div><div class="line">        restAdapter.getApiService().getUserInfo(token,<span class="keyword">new</span> Callback&lt;UserInfo&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">success</span><span class="params">(UserInfo userInfo)</span> </span>&#123;</div><div class="line">                     showMessage(userInfo.getUser);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failure</span><span class="params">(RetrofitError error)</span> </span>&#123;</div><div class="line">                <span class="comment">//处理错误</span></div><div class="line">                ...</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failure</span><span class="params">(RetrofitError error)</span> </span>&#123;</div><div class="line">        <span class="comment">// Error handling</span></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>如何用RxJava来解决：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">restAdapter.getApiService()</div><div class="line">    .getToken()</div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;String,Observable&lt;UserInfo&gt;&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;UserInfo&gt; <span class="title">call</span><span class="params">(String token)</span></span>&#123;</div><div class="line">                     <span class="keyword">return</span> restAdapter.getApiService().getUserInfo(token);</div><div class="line">            &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;UserInfo&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(UserInfo userInfo)</span></span>&#123;</div><div class="line">                     showMessage(userInfo.getUser);</div><div class="line">            &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p><p>加入线程切换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">restAdapter.getApiService().getToken()</div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;String,Observable&lt;UserInfo&gt;&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;UserInfo&gt; <span class="title">call</span><span class="params">(String token)</span></span>&#123;</div><div class="line">                     <span class="keyword">return</span> restAdapter.getApiService().getUserInfo(token);</div><div class="line">            &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></div><div class="line">    .observeOn(AndroidSchedulers.mainThread())<span class="comment">// 指定 Subscriber 的回调发生在主线程</span></div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;UserInfo&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(UserInfo userInfo)</span></span>&#123;</div><div class="line">                     showMessage(userInfo.getUser);</div><div class="line">            &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><p>#####操作符复用：</p><p>先介绍不合适的做法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">applySchedulers</span><span class="params">(Observable&lt;T&gt; observable)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> observable.subscribeOn(Schedulers.io())</div><div class="line">     .observeOn(AndroidSchedulers.mainThread());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>应用后，破坏了链式调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">applySchedulers(restAdapter.getApiService().getToken()</div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;String,Observable&lt;UserInfo&gt;&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;UserInfo&gt; <span class="title">call</span><span class="params">(String token)</span></span>&#123;</div><div class="line">                     <span class="keyword">return</span> restAdapter.getApiService().getUserInfo(token);</div><div class="line">            &#125;</div><div class="line">    &#125;)</div><div class="line">    ).subscribe(<span class="keyword">new</span> Action1&lt;UserInfo&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(UserInfo userInfo)</span></span>&#123;</div><div class="line">                     showMessage(userInfo.getUser);</div><div class="line">            &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p><h5 id="我们加入转换器与Compose"><a href="#我们加入转换器与Compose" class="headerlink" title="我们加入转换器与Compose()"></a>我们加入转换器与Compose()</h5><p>Transformer：继承Func1<observable<t>, Observable<r>&gt;的一个接口，其实是将一个Observable转换为另一个Observable<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;T&gt; <span class="function">Transformer&lt;T, T&gt; <span class="title">applySchedulers</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Transformer&lt;T, T&gt;() &#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Observable&lt;T&gt; observable)</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> observable.subscribeOn(Schedulers.io())</div><div class="line">             .observeOn(AndroidSchedulers.mainThread());</div><div class="line">       &#125;</div><div class="line">     &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></r></observable<t></p><p>用compose操作符做法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">restAdapter.getApiService().getToken()</div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;String,Observable&lt;UserInfo&gt;&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;UserInfo&gt; <span class="title">call</span><span class="params">(String token)</span></span>&#123;</div><div class="line">                     <span class="keyword">return</span> restAdapter.getApiService().getUserInfo(token);</div><div class="line">            &#125;</div><div class="line">    &#125;)</div><div class="line">    .compose(applySchedulers())</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;UserInfo&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(UserInfo userInfo)</span></span>&#123;</div><div class="line">                     showMessage(userInfo.getUser);</div><div class="line">            &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><h4 id="RxJava的扩展"><a href="#RxJava的扩展" class="headerlink" title="RxJava的扩展"></a>RxJava的扩展</h4><p>主要是针对以下几个开源库展开来说：</p><ul><li>1.Rxbinding：用RxJava实现onClick,TextWatcher,check等事件绑定。</li><li>2.RxBus：用RxJava实现EventBus或者Otto。</li><li>3.RxPreferences：用RxJava实现Android中的SharedPreferences。</li><li>4.RxLifecycle：用来严格控制由于发布了一个订阅后，由于没有及时取消，导致Activity/Fragment无法销毁导致的内存泄露。</li><li>5.ReactiveNetwork：使用RxJava来监听网络连接状态和wifi信号强度变化。</li><li>6.RxPermissions：针对 Android 6.0 权限管理进行一个 Rx 封装的一个类库。</li><li>7.rxloader：用RxJava对loader的一个封装。</li><li>还有更多…</li></ul><h3 id="Android应用场景"><a href="#Android应用场景" class="headerlink" title="Android应用场景"></a>Android应用场景</h3><ul><li>1.避免嵌套回调地狱问题。</li><li>2.使用debounce减少频繁的网络请求。避免每输入（删除）一个字就做一次联想。</li><li>3.使用combineLatest合并最近N个结点,注册的时候所有输入信息（邮箱、密码、电话号码等）合法才点亮注册按钮。</li><li>4.使用merge合并两个数据源,最后做统一处理。</li><li>5.使用concat和first做缓存，依次检查memory、disk和network中是否存在数据，任何一步一旦发现数据后面的操作都不执行。</li><li>6.使用timer做定时操作。</li><li>7.使用interval做周期性操作。</li><li>8.使用throttleFirst防止按钮重复点击</li><li>9.做响应式的界面。</li><li>更多…</li></ul><p>部分例子代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RxTextView.textChanges(searchEditText)</div><div class="line">     .debounce(<span class="number">150</span>, MILLISECONDS)</div><div class="line">     .switchMap(Api::searchItems)</div><div class="line">     .subscribe(<span class="keyword">this</span>::updateList, t-&gt;showError());</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Observable.merge(getNews(), getHotNews(), </div><div class="line">    <span class="keyword">new</span> Func2&lt;Response&lt;News&gt;, MyResponse&lt;News&gt;, Boolean&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Response&lt;News&gt; response, Response&lt;News&gt; response2)</span> </span>&#123;</div><div class="line">            mData.clear();</div><div class="line">            mData.addAll(response);</div><div class="line">            mData.addAll(response2.msg);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribeOn(Schedulers.io())</div><div class="line">    .observeOn(AndroidSchedulers.mainThread())</div><div class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Boolean&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;&#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Boolean o)</span> </span>&#123;</div><div class="line">               mAdapter.notifyDataSetChanged();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">RxView.clicks(button)  </div><div class="line">      .throttleFirst(<span class="number">1</span>, TimeUnit.SECONDS)  </div><div class="line">      .subscribe(<span class="keyword">new</span> Observer&lt;Object&gt;() &#123;  </div><div class="line">          <span class="meta">@Override</span>  </div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;  </div><div class="line">                log.d (<span class="string">"completed"</span>);  </div><div class="line">          &#125;  </div><div class="line">  </div><div class="line">          <span class="meta">@Override</span>  </div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;  </div><div class="line">                log.e(<span class="string">"error"</span>);  </div><div class="line">          &#125;  </div><div class="line">  </div><div class="line">          <span class="meta">@Override</span>  </div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;  </div><div class="line">               log.d(<span class="string">"button clicked"</span>);  </div><div class="line">          &#125;  </div><div class="line">      &#125;);</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(<span class="keyword">this</span>);  </div><div class="line">RxSharedPreferences rxPreferences = RxSharedPreferences.create(preferences);  </div><div class="line">  </div><div class="line">Preference&lt;Boolean&gt; checked = rxPreferences.getBoolean(<span class="string">"checked"</span>, <span class="keyword">true</span>);  </div><div class="line">  </div><div class="line">CheckBox checkBox = (CheckBox) findViewById(R.id.cb_test);  </div><div class="line">RxCompoundButton.checkedChanges(checkBox)  </div><div class="line">        .subscribe(checked.asAction());</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; memory = Observable</div><div class="line">    .create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;  </div><div class="line">            <span class="keyword">if</span> (memoryCache != <span class="keyword">null</span>) &#123;  </div><div class="line">                subscriber.onNext(memoryCache);  </div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                subscriber.onCompleted();  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;);  </div><div class="line"></div><div class="line">Observable&lt;String&gt; disk = Observable</div><div class="line">    .create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;  </div><div class="line">            String cachePref = rxPreferences.getString(<span class="string">"cache"</span>).get();  </div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(cachePref)) &#123;  </div><div class="line">                subscriber.onNext(cachePref);  </div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                subscriber.onCompleted();  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;);  </div><div class="line"></div><div class="line">Observable&lt;String&gt; network = Observable.just(<span class="string">"network"</span>);  </div><div class="line">  </div><div class="line"><span class="comment">//依次检查memory、disk、network  </span></div><div class="line">Observable.concat(memory, disk, network)  </div><div class="line">    .first()  </div><div class="line">    .subscribeOn(Schedulers.newThread())  </div><div class="line">    .subscribe(s -&gt; &#123;  </div><div class="line">        memoryCache = <span class="string">"memory"</span>;  </div><div class="line">        System.out.println(<span class="string">"subscribe: "</span> + s);  </div><div class="line">    &#125;);</div></pre></td></tr></table></figure><h4 id="感谢-参考"><a href="#感谢-参考" class="headerlink" title="感谢/参考"></a>感谢/参考</h4><p>感谢Jake大神的启蒙，感谢Ivan.Morgillo的书《RxJava Essentials》,感谢扔物线的文章和大头鬼的翻译文章，同时也是一路看他们的文章走过来的，最后感谢所有分享RxJava的小伙伴们。</p><ul><li><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">http://gank.io/post/560e15be2dca930e00da1083</a></li><li><a href="http://blog.csdn.net/lzyzsd/article/details/41833541" target="_blank" rel="external">http://blog.csdn.net/lzyzsd/article/details/41833541</a></li><li><a href="http://blog.csdn.net/theone10211024/article/details/50435325" target="_blank" rel="external">http://blog.csdn.net/theone10211024/article/details/50435325</a></li><li>《RxJava Essentials》</li><li><a href="http://reactivex.io" target="_blank" rel="external">http://reactivex.io</a></li></ul><h3 id="关于RxJava和Android的学习"><a href="#关于RxJava和Android的学习" class="headerlink" title="关于RxJava和Android的学习"></a>关于RxJava和Android的学习</h3><p>主要从渠道，知识点和资源几方面介绍了下学习，提到<a href="http://mobdevgroup.com" target="_blank" rel="external">MobDevGroup</a>这个资源站。</p><h2 id="GDG总结"><a href="#GDG总结" class="headerlink" title="GDG总结"></a>GDG总结</h2><p>由于时间上的问题，没有对一些原理进行讲解，尤其是变换等，大部分是在讲应用，总之呢除了对自己知识点一次不错的总结外，也是对自己的一次历练，接下来再接再厉。最后附上这次的PPT下载地址：</p><ul><li>Mac <a href="http://vdisk.weibo.com/s/CeH3i0tfvuvLU" target="_blank" rel="external">keynote</a></li><li>Windows <a href="http://vdisk.weibo.com/s/CeH3i0tfvuvMd" target="_blank" rel="external">PowerPoint</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;1月10号这一天，也是值得高兴的日子，一大早起来打开手机看到《RxJava Essentials》一书的作者Ivan.Morgillo给我在
      
    
    </summary>
    
      <category term="开发经验" scheme="https://yuxingxin.com/categories/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="RxJava" scheme="https://yuxingxin.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava Essentials翻译总结</title>
    <link href="https://yuxingxin.com/2016/01/08/RxJavaEssentials/"/>
    <id>https://yuxingxin.com/2016/01/08/RxJavaEssentials/</id>
    <published>2016-01-07T16:00:00.000Z</published>
    <updated>2016-01-08T03:21:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>##前言<br>在前年的时候，一直忙于工作，偶尔关注下开源社区，平时在使用retrofit的库时一直采用传统的回调，当时看官网发现也可以Observable对象，很好奇，但是一直不知道这是什么？慢慢的，关注Jake大神，才知道是RxJava，当时并没有引起我对RxJava 的好奇，也就没有太在意，但是我的心里一直有个梗就是在使用回调时如何让嵌套回调的代码看起来不是那么槽糕，用今天的话说就是回调地狱，直到去年，国内一些积极推动RxJava的大神们才真正让我认识了它，可能最让我印象深刻的一点就是它解决了我这么多年的那个梗，从大头鬼的深入浅出系列到扔物线的给Android开发者的RxJava详解，我决定想系统的学一下它，一直想找本中文书，可是没找到，直到有一天发现国外的这本《RxJava Essentials》，看了一下之后，欣喜之余，决定把它翻译出来，算是巩固学习。</p><p>##书内容介绍<br>全书分了八章，前两章介绍Rx，并引出Rx在Android中的引用，三四五六章着重讲RxJava的操作符，从创建、过滤一直讲到变换、组合，最后一张结合Android开源库Retrofit来一起使用，总之对于Android开发者来讲是本不错的基础书。</p><h3 id="1-RX-from-NET-to-RxJava"><a href="#1-RX-from-NET-to-RxJava" class="headerlink" title="1.RX-from .NET to RxJava"></a><strong>1.RX-from .NET to RxJava</strong></h3><blockquote><p>本章带你进入reactive的世界。我们会比较reactive 方法和传统方法，进而探索它们之间的相似和不同的地方。</p></blockquote><h3 id="2-Why-Observables"><a href="#2-Why-Observables" class="headerlink" title="2.Why Observables?"></a><strong>2.Why Observables?</strong></h3><blockquote><p>本章会对观察者模式做一个概述，如何实现它以及怎样用RxJava来进行扩展，被观察者是什么，以及被观察者如何与迭代联系到一起的。</p></blockquote><h3 id="3-Hello-Reactive-World"><a href="#3-Hello-Reactive-World" class="headerlink" title="3.Hello Reactive World"></a><strong>3.Hello Reactive World</strong></h3><blockquote><p>本章会利用我们所学的知识来创建第一个reactive Android应用。</p></blockquote><h3 id="4-Filtering-Observables"><a href="#4-Filtering-Observables" class="headerlink" title="4.Filtering Observables"></a><strong>4.Filtering Observables</strong></h3><blockquote><p>本章我们会研究Observable序列的本质:filtering.我们也将学到如何从一个发出的Observable中选取我们想要的值，如何获得一个有限的数值，如何处理溢出的场景，以及更多有用的技巧。</p></blockquote><h3 id="5-Transforming-Observables"><a href="#5-Transforming-Observables" class="headerlink" title="5.Transforming Observables"></a><strong>5.Transforming Observables</strong></h3><blockquote><p>本章将讲述如何通过变换Observable序列来创建出我们所需要的序列。</p></blockquote><h3 id="6-Combining-Observables"><a href="#6-Combining-Observables" class="headerlink" title="6.Combining Observables"></a><strong>6.Combining Observables</strong></h3><blockquote><p>本章将研究与函数结合，同时也会学到当创建我们想要的Observable时又如何与多个Observable协同工作。</p></blockquote><h3 id="7-Schedulers-Defeating-the-Android-MainThread-Issue"><a href="#7-Schedulers-Defeating-the-Android-MainThread-Issue" class="headerlink" title="7.Schedulers-Defeating the Android MainThread Issue"></a><strong>7.Schedulers-Defeating the Android MainThread Issue</strong></h3><blockquote><p>本章将介绍如何使用RxJava Schedulers 来处理多线程和并发编程。我们也将用reactive的方式来创建网络操作、内存访问、耗时处理。</p></blockquote><h3 id="8-REST-in-peace-RxJava-and-Retrofit"><a href="#8-REST-in-peace-RxJava-and-Retrofit" class="headerlink" title="8.REST in peace-RxJava and Retrofit"></a><strong>8.REST in peace-RxJava and Retrofit</strong></h3><blockquote><p>本章教会你如何让Square公司的Retrofit和RxJava结合来一起使用，来创建一个更高效的REST客户端程序。</p></blockquote><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>Rx给了我们一种新的学习扩展和并发的方式，它和面向对象一样是一种新的思想，熟练的使用它可以很容易的帮助我们处理日常繁杂的业务逻辑，同时又不会搞乱你的代码，建议开发者都可以学习下，另外这里也推荐另外一本《Learning Reactive Programming》，是它的姊妹篇，介绍响应式编程，同样推荐看看。<br><img src="/assets/images/rxjava.jpg" alt="RxJava"><br>【RxJava Essentials】</p><p><img src="/assets/images/reactive.jpg" alt="Learning Reactive Programming"><br>【Learning Reactive Programming】</p><p>《RxJava Essentials》<a href="https://www.gitbook.com/book/yuxingxin/rxjava-essentials-cn/" target="_blank" rel="external">翻译中文版电子书下载地址</a></p><p>《RxJava Essentials》<a href="http://vdisk.weibo.com/s/CeH3i0tfvZMVq" target="_blank" rel="external">英文版下载地址</a></p><p>《Learning Reactive Programming》<a href="http://vdisk.weibo.com/s/CeH3i0tfvZMfT" target="_blank" rel="external">英文版下载地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##前言&lt;br&gt;在前年的时候，一直忙于工作，偶尔关注下开源社区，平时在使用retrofit的库时一直采用传统的回调，当时看官网发现也可以Observable对象，很好奇，但是一直不知道这是什么？慢慢的，关注Jake大神，才知道是RxJava，当时并没有引起我对RxJava 
      
    
    </summary>
    
      <category term="学习资源" scheme="https://yuxingxin.com/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="RxJava" scheme="https://yuxingxin.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android磁盘缓存</title>
    <link href="https://yuxingxin.com/2015/11/24/DiskLruCache/"/>
    <id>https://yuxingxin.com/2015/11/24/DiskLruCache/</id>
    <published>2015-11-23T16:00:00.000Z</published>
    <updated>2015-11-23T10:01:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>在上一篇文章中简单介绍了<a href="http://www.yuxingxin.com/2015/11/23/LruCache/" target="_blank" rel="external">内存缓存</a>，其核心就是LruCache这个类，我们知道它的优点就是直接可以读取内存，当然速度就会很快，但是它同时也有下面不足的地方：</p><ol><li>手机内存空间十分有限，所以我们不能随意的设置内存缓存大小。</li><li>内存紧张时可能会优先被GC回收掉。</li><li>退出应用时就回收掉，不能离线存储数据</li></ol><p>基于以上原因，于是就有了磁盘缓存，Android开源届Jake大神为我们提供了一种解决方案:<a href="https://github.com/JakeWharton/DiskLruCache" target="_blank" rel="external">DiskLruCache</a>,也是现在应用的最广泛的一种，并且已经获得谷歌官方认可。</p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><h4 id="打开缓存"><a href="#打开缓存" class="headerlink" title="打开缓存"></a>打开缓存</h4><p>通过源码我们可以看到DiskLruCache的构造方法时私有的，所以不能通过new的方法来获取到它的实例，但是作者给我们提供了一种方式来创建实例，通过调用open方法，其中的四个参数刚好与构造函数中的四个参数相吻合:</p><ol><li>directory指定缓存的目录</li><li>appVersion指定应用程序的版本号</li><li>valueCount指定一个key可以对应多少个缓存文件，一般情况下我们都指定这个参数为1</li><li>maxSize指定我们最多可以缓存多大的字节数<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> DiskLruCache(<span class="built_in">File</span> directory, <span class="keyword">int</span> appVersion, <span class="keyword">int</span> valueCount, <span class="keyword">long</span> maxSize) &#123;</div><div class="line">  <span class="keyword">this</span>.directory = directory;</div><div class="line">  <span class="keyword">this</span>.appVersion = appVersion;</div><div class="line">  <span class="keyword">this</span>.journalFile = <span class="keyword">new</span> <span class="built_in">File</span>(directory, JOURNAL_FILE);</div><div class="line">  <span class="keyword">this</span>.journalFileTmp = <span class="keyword">new</span> <span class="built_in">File</span>(directory, JOURNAL_FILE_TEMP);</div><div class="line">  <span class="keyword">this</span>.journalFileBackup = <span class="keyword">new</span> <span class="built_in">File</span>(directory, JOURNAL_FILE_BACKUP);</div><div class="line">  <span class="keyword">this</span>.valueCount = valueCount;</div><div class="line">  <span class="keyword">this</span>.maxSize = maxSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"> * Opens the cache in &#123;@code directory&#125;, creating a cache if none exists</div><div class="line"> * there.</div><div class="line"> *</div><div class="line"> * @param directory a writable directory</div><div class="line"> * @param valueCount the number of values per cache entry. Must be positive.</div><div class="line"> * @param maxSize the maximum number of bytes this cache should use to store</div><div class="line"> * @throws IOException if reading or writing the cache directory fails</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> DiskLruCache <span class="built_in">open</span>(<span class="built_in">File</span> directory, <span class="keyword">int</span> appVersion, <span class="keyword">int</span> valueCount, <span class="keyword">long</span> maxSize)</div><div class="line">    throws IOException &#123;</div><div class="line">  <span class="built_in">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maxSize &lt;= 0"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">if</span> (valueCount &lt;= <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"valueCount &lt;= 0"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// If a bkp file exists, use it instead.</span></div><div class="line">  <span class="built_in">File</span> backupFile = <span class="keyword">new</span> <span class="built_in">File</span>(directory, JOURNAL_FILE_BACKUP);</div><div class="line">  <span class="built_in">if</span> (backupFile.<span class="built_in">exists</span>()) &#123;</div><div class="line">    <span class="built_in">File</span> journalFile = <span class="keyword">new</span> <span class="built_in">File</span>(directory, JOURNAL_FILE);</div><div class="line">    <span class="comment">// If journal file also exists just delete backup file.</span></div><div class="line">    <span class="built_in">if</span> (journalFile.<span class="built_in">exists</span>()) &#123;</div><div class="line">      backupFile.<span class="keyword">delete</span>();</div><div class="line">    &#125; <span class="built_in">else</span> &#123;</div><div class="line">      renameTo(backupFile, journalFile, false);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Prefer to pick up where we left off.</span></div><div class="line">  DiskLruCache cache = <span class="keyword">new</span> DiskLruCache(directory, appVersion, valueCount, maxSize);</div><div class="line">  <span class="built_in">if</span> (cache.journalFile.<span class="built_in">exists</span>()) &#123;</div><div class="line">    <span class="built_in">try</span> &#123;</div><div class="line">      cache.readJournal();</div><div class="line">      cache.processJournal();</div><div class="line">      cache.journalWriter = <span class="keyword">new</span> BufferedWriter(</div><div class="line">          <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(cache.journalFile, true), Util.US_ASCII));</div><div class="line">      <span class="built_in">return</span> cache;</div><div class="line">    &#125; <span class="built_in">catch</span> (IOException journalIsCorrupt) &#123;</div><div class="line">      System.out</div><div class="line">          .<span class="built_in">println</span>(<span class="string">"DiskLruCache "</span></div><div class="line">              + directory</div><div class="line">              + <span class="string">" is corrupt: "</span></div><div class="line">              + journalIsCorrupt.getMessage()</div><div class="line">              + <span class="string">", removing"</span>);</div><div class="line">      cache.<span class="keyword">delete</span>();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Create a new empty cache.</span></div><div class="line">  directory.mkdirs();</div><div class="line">  cache = <span class="keyword">new</span> DiskLruCache(directory, appVersion, valueCount, maxSize);</div><div class="line">  cache.rebuildJournal();</div><div class="line">  <span class="built_in">return</span> cache;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>然后缓存路径为：/sdcard/Android/data/<application package="">/cache 这个路径下面，但这里我们通常的做法就是判断是否有SD卡，没有的话就放在内部存储里面，缓存路径为：/data/data/<application package="">/cache<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public File getDiskCacheDir(<span class="built_in">Context</span> <span class="built_in">context</span>, String uniqueName) &#123;  </div><div class="line">    String <span class="keyword">cachePath; </span> </div><div class="line">    if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())  </div><div class="line">            <span class="title">||</span> !Environment.isExternalStorageRemovable()) &#123;  </div><div class="line">        <span class="keyword">cachePath </span>= <span class="built_in">context</span>.getExternalCacheDir().getPath()<span class="comment">;  </span></div><div class="line">    &#125; else &#123;  </div><div class="line">        <span class="keyword">cachePath </span>= <span class="built_in">context</span>.getCacheDir().getPath()<span class="comment">;  </span></div><div class="line">    &#125;  </div><div class="line">    return new File(<span class="keyword">cachePath </span>+ File.separator + uniqueName)<span class="comment">;  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></application></application></p><p>这里的uniqueName值作为我们区分不同的数据的一个唯一值，如存放图片的缓存文件夹（images），存放视频的缓存文件夹(videos)，存放文本文件的缓存文件夹（txt）。<br>第二个参数获取版本号就很简单了<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public int getAppVersion(<span class="built_in">Context</span> <span class="built_in">context</span>) &#123;  </div><div class="line">    try &#123;  </div><div class="line">        PackageInfo info = <span class="built_in">context</span>.getPackageManager().getPackageInfo(<span class="built_in">context</span>.getPackageName(), <span class="number">0</span>)<span class="comment">;  </span></div><div class="line">        return info.versionCode<span class="comment">;  </span></div><div class="line">    &#125; catch (NameNotFoundException e) &#123;  </div><div class="line">        e.printStackTrace()<span class="comment">;  </span></div><div class="line">    &#125;  </div><div class="line">    return <span class="number">1</span><span class="comment">;  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>第三个参数上面提到了为1，第四个参数假定我们设为10M，那么就有了：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DiskLruCache </span>mDiskLruCache = null<span class="comment">;  </span></div><div class="line">try &#123;  </div><div class="line">    File <span class="keyword">cacheDir </span>= getDiskCacheDir(<span class="built_in">context</span>, <span class="string">"images"</span>)<span class="comment">;  </span></div><div class="line">    if (!<span class="keyword">cacheDir.exists()) </span>&#123;  </div><div class="line">        <span class="keyword">cacheDir.mkdirs(); </span> </div><div class="line">    &#125;  </div><div class="line">    mDiskLruCache = <span class="keyword">DiskLruCache.open(cacheDir, </span>getAppVersion(<span class="built_in">context</span>), <span class="number">1</span>, <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>)<span class="comment">;  </span></div><div class="line">&#125; catch (IOException e) &#123;  </div><div class="line">    e.printStackTrace()<span class="comment">;  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="存缓存到磁盘"><a href="#存缓存到磁盘" class="headerlink" title="存缓存到磁盘"></a>存缓存到磁盘</h4><p>这点类似SharePreferences,DiskLruCache给我们提供了一个内部类Editor，它用来完成针对缓存文件的读取、储存、删除、修改等等操作：通过调用实例的edit方法传入key值来把文件缓存到磁盘，然后针对函数返回的Editor实例调用commit方法完成最后的提交。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">mDiskLruCache</span><span class="selector-class">.edit</span>(<span class="selector-tag">key</span>)<span class="selector-class">.commit</span>();  </div><div class="line"><span class="selector-tag">mDiskLruCache</span><span class="selector-class">.flush</span>();</div></pre></td></tr></table></figure></p><p>这里的key值我们一般使用MD5加密后的字符串来做唯一处理，当然也可以调用abort来放弃提交。</p><h4 id="读取缓存文件"><a href="#读取缓存文件" class="headerlink" title="读取缓存文件"></a>读取缓存文件</h4><p>读取缓存文件通过get(key)方法来进行：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InputStream <span class="keyword">is</span> = mDiskLruCache.<span class="keyword">get</span>(key).getInputStream(<span class="number">0</span>);</div><div class="line"><span class="comment">//TODO 然后再对流做进一步的处理</span></div></pre></td></tr></table></figure></p><h4 id="移除缓存"><a href="#移除缓存" class="headerlink" title="移除缓存"></a>移除缓存</h4><p>移除缓存调用remove(key)方法：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mDiskLruCache.<span class="built_in">remove</span>(<span class="built_in">key</span>);</div></pre></td></tr></table></figure></p><h4 id="获取缓存大小"><a href="#获取缓存大小" class="headerlink" title="获取缓存大小"></a>获取缓存大小</h4><p>通过size()方法返回当前缓存路径下面所有缓存数据的字节数，以byte为单位。</p><h4 id="关闭缓存"><a href="#关闭缓存" class="headerlink" title="关闭缓存"></a>关闭缓存</h4><p>调用close()方法，通常在界面销毁的时候调用</p><h4 id="删除缓存"><a href="#删除缓存" class="headerlink" title="删除缓存"></a>删除缓存</h4><p>调用delete()方法,即可清除缓存</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h3&gt;&lt;p&gt;在上一篇文章中简单介绍了&lt;a href=&quot;http://www.yuxingxin.com/2015/11/23/LruCa
      
    
    </summary>
    
      <category term="Android开发进阶" scheme="https://yuxingxin.com/categories/Android%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="cache" scheme="https://yuxingxin.com/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>Android内存缓存</title>
    <link href="https://yuxingxin.com/2015/11/23/LruCache/"/>
    <id>https://yuxingxin.com/2015/11/23/LruCache/</id>
    <published>2015-11-22T16:00:00.000Z</published>
    <updated>2015-11-23T06:01:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>通常情况下，我们为了实现更好的用户体验从而引入了缓存的概念，这在Android应用于图片列表加载上显得更为重要。我们为了让内存维护在一个合理的范围，通常会把移除屏幕的图片进行回收处理，让GC去操作这些不在持有图片的引用，为了App有更流畅的体验，比如在界面上更加流畅的加载图片，而不得不考虑的一个问题就是图片回收之后，这时候用户又将刚刚回收的图片重新滑入屏幕内，这时候又回去加载一遍刚刚回收的图片，这无疑给性能带来了诸多问题，因此我们引入内存缓存。</p><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h3><p>内存缓存对于那些大量占用程序宝贵内存资源的图片来说很好用，它提供了快速访问内存的方法，在过去，我们经常通过软引用或者弱引用(SoftReference or WeakReference)的方式，但是现在已经不推荐使用，自从Android 2.3（API Level 9）开始，JVM做了调整，使得垃圾回收器更容易倾向于回收持有软引用或者是弱引用的对象，折让弱引用或者软引用就变得不可靠，另外，Android3.0（API Level 11）中，图片的数据会存储在本地的内存中，也没有一个可预见的方式来释放它，这就给应用程序的崩溃或内存溢出埋下了隐患。因此在谷歌官方给我们在v4包中提供了LruCache类，它主要算法原理是将对象用强引用存储在LinkedHashMap中，并且把最近最少使用的对象在缓存值达到预设值之前从内存中移除，来释放它。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param maxSize for caches that do not override &#123;@link #sizeOf&#125;, this is</div><div class="line"> *     the maximum number of entries in the cache. For all other caches,</div><div class="line"> *     this is the maximum sum of the sizes of the entries in this cache.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maxSize &lt;= 0"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.maxSize = maxSize;</div><div class="line">    <span class="keyword">this</span>.<span class="built_in">map</span> = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="literal">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="关于LinkedHashMap的介绍"><a href="#关于LinkedHashMap的介绍" class="headerlink" title="关于LinkedHashMap的介绍"></a>关于LinkedHashMap的介绍</h4><p>LinkedHashMap是HashMap的子类，它保留了插入的顺序，并维护者运行所有元素的一个双重链表，默认是按插入顺序排序(即构造函数最后一个参数false)，如果指定按访问顺序排序（最近最少使用，构造函数最后一个为true），那么调用get方法后，会将这次访问的元素移至链表尾部，不断访问可以形成按访问顺序排序的链表。</p><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h3><ol><li><p>初始化</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。 </span></div><div class="line"><span class="comment">// LruCache通过构造函数传入缓存值，以KB为单位。 </span></div><div class="line"><span class="built_in">int</span> maxMemory = (<span class="built_in">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>); </div><div class="line"><span class="comment">// 使用最大可用内存值的1/8作为缓存的大小。 </span></div><div class="line"><span class="built_in">int</span> cacheSize = maxMemory / <span class="number">8</span>; </div><div class="line">mMemoryCache = <span class="keyword">new</span> LruCache&lt;<span class="keyword">String</span>, Bitmap&gt;(cacheSize) &#123; </div><div class="line">    @Override</div><div class="line">    <span class="keyword">protected</span> <span class="built_in">int</span> sizeOf(<span class="keyword">String</span> <span class="built_in">key</span>, Bitmap bitmap) &#123; </div><div class="line">        <span class="comment">// 重写此方法来衡量每张图片的大小，默认返回图片数量。 </span></div><div class="line">        <span class="keyword">return</span> bitmap.getByteCount() / <span class="number">1024</span>; </div><div class="line">    &#125; </div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>提供访问方法</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> addBitmapToMemoryCache(<span class="keyword">String</span> <span class="built_in">key</span>, Bitmap bitmap) &#123; </div><div class="line">    <span class="keyword">if</span> (getBitmapFromMemCache(<span class="built_in">key</span>) == <span class="keyword">null</span>) &#123; </div><div class="line">        mMemoryCache.put(<span class="built_in">key</span>, bitmap); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">    </div><div class="line"><span class="keyword">public</span> Bitmap getBitmapFromMemCache(<span class="keyword">String</span> <span class="built_in">key</span>) &#123; </div><div class="line">    <span class="keyword">return</span> mMemoryCache.<span class="built_in">get</span>(<span class="built_in">key</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>上面使用了系统分配给应用程序的八分之一作为缓存大小，在一些手机上大概是4M的内存空间，通常我们在加载图片的时候会先去缓存中取，如果取不到，则会开启一个后台线程去加载图片<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public void loadBitmap(<span class="type">String</span> url ,<span class="type">ImageView</span> iv)&#123;</div><div class="line">    <span class="type">String</span> key = md5(url);</div><div class="line">    <span class="type">Bitmap</span> bitmap = getBitmapFromMemCache(key);</div><div class="line">    <span class="keyword">if</span>(bitmap != <span class="literal">null</span>)&#123;</div><div class="line">        iv.setImageBitmap(bitmap);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">//TODO 开启线程去下载</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在下载完图片后还需要保存在缓存中</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageDownLoaderTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask&lt;Integer</span>,<span class="title">Void</span>,<span class="title">Bitmap&gt;</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="type">Bitmap</span> doInBackground(<span class="type">Integer</span>... params) &#123; </div><div class="line">        <span class="comment">//取到Bitmap</span></div><div class="line">        …</div><div class="line">        …</div><div class="line">        addBitmapToMemoryCache(<span class="type">String</span>.valueOf(params[<span class="number">0</span>]), bitmap); </div><div class="line">        <span class="keyword">return</span> bitmap; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="4-源码解析"><a href="#4-源码解析" class="headerlink" title="4.源码解析"></a>4.源码解析</h3><ol><li><p>成员变量</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> LinkedHashMap&lt;K, V&gt; map;  </div><div class="line">  </div><div class="line"><span class="comment">/** Size of this cache in units. Not necessarily the number of elements. */</span>  </div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">//已经存储的大小</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">//规定的最大存储空间</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> putCount;  <span class="comment">//put的次数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> createCount;  <span class="comment">//create的次数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> evictionCount;  <span class="comment">//回收的次数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> hitCount;  <span class="comment">//命中的次数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> missCount;  <span class="comment">//丢失的次数</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * For caches that do not override &#123;<span class="doctag">@link</span> #sizeOf&#125;, this returns the number</div><div class="line"> * of entries in the cache. For all other caches, this returns the sum of</div><div class="line"> * the sizes of the entries in this cache.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> size;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * For caches that do not override &#123;<span class="doctag">@link</span> #sizeOf&#125;, this returns the maximum</div><div class="line"> * number of entries in the cache. For all other caches, this returns the</div><div class="line"> * maximum sum of the sizes of the entries in this cache.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">maxSize</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> maxSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the number of times &#123;<span class="doctag">@link</span> #get&#125; returned a value that was</div><div class="line"> * already present in the cache.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">hitCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> hitCount;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the number of times &#123;<span class="doctag">@link</span> #get&#125; returned null or required a new</div><div class="line"> * value to be created.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">missCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> missCount;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the number of times &#123;<span class="doctag">@link</span> #create(Object)&#125; returned a value.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">createCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> createCount;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the number of times &#123;<span class="doctag">@link</span> #put&#125; was called.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">putCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> putCount;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the number of values that have been evicted.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">evictionCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> evictionCount;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>取缓存</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the value for &#123;@code key&#125; if it exists in the cache or can be</div><div class="line"> * created by &#123;@code #create&#125;. If a value was returned, it is moved to the</div><div class="line"> * head of the queue. This returns null if a value is not cached and cannot</div><div class="line"> * be created.</div><div class="line"> * 通过key来取对应的元素，或者返回新创建的元素，相应的这个元素会移动到队列的头部，如果这个元</div><div class="line"> * 素没有被缓存，也不能创建，则会返回null</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="built_in">get</span>(K <span class="built_in">key</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    V mapValue;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        mapValue = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</div><div class="line">        <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</div><div class="line">            hitCount++; <span class="comment">//命中  找到了</span></div><div class="line">            <span class="keyword">return</span> mapValue;</div><div class="line">        &#125;</div><div class="line">        missCount++;  <span class="comment">//丢失，没有命中</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Attempt to create a value. This may take a long time, and the map</div><div class="line">     * may be different when create() returns. If a conflicting value was</div><div class="line">     * added to the map while create() was working, we leave that value in</div><div class="line">     * the map and release the created value.</div><div class="line">     */</div><div class="line"></div><div class="line">    V createdValue = create(<span class="built_in">key</span>);</div><div class="line">    <span class="keyword">if</span> (createdValue == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        createCount++;</div><div class="line">        mapValue = <span class="built_in">map</span>.put(<span class="built_in">key</span>, createdValue);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// There was a conflict so undo that last put</span></div><div class="line">            <span class="built_in">map</span>.put(<span class="built_in">key</span>, mapValue);<span class="comment">// 如果前面存在oldValue,那么就撤销最后一次的put</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">size</span> += safeSizeOf(<span class="built_in">key</span>, createdValue);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</div><div class="line">        entryRemoved(<span class="keyword">false</span>, <span class="built_in">key</span>, createdValue, mapValue);</div><div class="line">        <span class="keyword">return</span> mapValue;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        trimToSize(maxSize);</div><div class="line">        <span class="keyword">return</span> createdValue;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>存缓存</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Caches &#123;@code value&#125; for &#123;@code key&#125;. The value is moved to the head of</div><div class="line"> * the queue.</div><div class="line"> *</div><div class="line"> * @return the previous value mapped by &#123;@code key&#125;.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> V put(K key, V value) &#123;</div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null || value == null"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    V <span class="keyword">previous</span>;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        putCount++;</div><div class="line">        <span class="keyword">size</span> += safeSizeOf(key, value);</div><div class="line">        <span class="keyword">previous</span> = map.put(key, value);<span class="comment">//返回的先前的value值</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">previous</span> != <span class="keyword">null</span>) &#123; </div><div class="line">            <span class="keyword">size</span> -= safeSizeOf(key, <span class="keyword">previous</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">previous</span> != <span class="keyword">null</span>) &#123;</div><div class="line">        entryRemoved(<span class="keyword">false</span>, key, <span class="keyword">previous</span>, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    trimToSize(maxSize);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">previous</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>清掉占用的内存空间</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Remove the eldest entries until the total of remaining entries is at or</div><div class="line"> * below the requested size.</div><div class="line"> *</div><div class="line"> * @param maxSize the maximum size of the cache before returning. May be -1</div><div class="line"> *            to evict even 0-sized elements.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> trimToSize(<span class="built_in">int</span> maxSize) &#123;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        K <span class="built_in">key</span>;</div><div class="line">        V value;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">size</span> &lt; <span class="number">0</span> || (<span class="built_in">map</span>.isEmpty() &amp;&amp; <span class="built_in">size</span> != <span class="number">0</span>)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(getClass().getName()</div><div class="line">                        + <span class="string">".sizeOf() is reporting inconsistent results!"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="built_in">size</span> &lt;= maxSize || <span class="built_in">map</span>.isEmpty()) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Map.Entry&lt;K, V&gt; toEvict = <span class="built_in">map</span>.entrySet().iterator().next();</div><div class="line">            <span class="built_in">key</span> = toEvict.getKey();</div><div class="line">            value = toEvict.getValue();</div><div class="line">            <span class="built_in">map</span>.remove(<span class="built_in">key</span>);</div><div class="line">            <span class="built_in">size</span> -= safeSizeOf(<span class="built_in">key</span>, value);</div><div class="line">            evictionCount++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        entryRemoved(<span class="keyword">true</span>, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Removes the entry for &#123;@code key&#125; if it exists.</div><div class="line"> * 删除key相应的cache项，返回相应的value</div><div class="line"> * @return the previous value mapped by &#123;@code key&#125;.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> V remove(K <span class="built_in">key</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    V previous;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        previous = <span class="built_in">map</span>.remove(<span class="built_in">key</span>);</div><div class="line">        <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="built_in">size</span> -= safeSizeOf(<span class="built_in">key</span>, previous);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</div><div class="line">        entryRemoved(<span class="keyword">false</span>, <span class="built_in">key</span>, previous, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> previous;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Called for entries that have been evicted or removed. This method is</div><div class="line"> * invoked when a value is evicted to make space, removed by a call to</div><div class="line"> * &#123;@link #remove&#125;, or replaced by a call to &#123;@link #put&#125;. The default</div><div class="line"> * implementation does nothing.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;The method is called without synchronization: other threads may</div><div class="line"> * access the cache while this method is executing.</div><div class="line"> *</div><div class="line"> * @param evicted true if the entry is being removed to make space, false</div><div class="line"> *     if the removal was caused by a &#123;@link #put&#125; or &#123;@link #remove&#125;.</div><div class="line"> * @param newValue the new value for &#123;@code key&#125;, if it exists. If non-null,</div><div class="line"> *     this removal was caused by a &#123;@link #put&#125;. Otherwise it was caused by</div><div class="line"> *     an eviction or a &#123;@link #remove&#125;.</div><div class="line"> */</div><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> entryRemoved(<span class="built_in">boolean</span> evicted, K <span class="built_in">key</span>, V oldValue, V newValue) &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Called after a cache miss to compute a value for the corresponding key.</div><div class="line"> * Returns the computed value or null if no value can be computed. The</div><div class="line"> * default implementation returns null.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;The method is called without synchronization: other threads may</div><div class="line"> * access the cache while this method is executing.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;If a value for &#123;@code key&#125; exists in the cache when this method</div><div class="line"> * returns, the created value will be released with &#123;@link #entryRemoved&#125;</div><div class="line"> * and discarded. This can occur when multiple threads request the same key</div><div class="line"> * at the same time (causing multiple values to be created), or when one</div><div class="line"> * thread calls &#123;@link #put&#125; while another is creating a value for the same</div><div class="line"> * key.</div><div class="line"> */</div><div class="line"><span class="keyword">protected</span> V create(K <span class="built_in">key</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="built_in">int</span> safeSizeOf(K <span class="built_in">key</span>, V value) &#123;</div><div class="line">    <span class="built_in">int</span> result = sizeOf(<span class="built_in">key</span>, value);</div><div class="line">    <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Negative size: "</span> + <span class="built_in">key</span> + <span class="string">"="</span> + value);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the size of the entry for &#123;@code key&#125; and &#123;@code value&#125; in</div><div class="line"> * user-defined units.  The default implementation returns 1 so that size</div><div class="line"> * is the number of entries and max size is the maximum number of entries.</div><div class="line"> * 默认返回元素的个数，一般我们来重写，比如上面我们让他返回占用的最小内存单元</div><div class="line"> * &lt;p&gt;An entry's size must not change while it is in the cache.</div><div class="line"> */</div><div class="line"><span class="keyword">protected</span> <span class="built_in">int</span> sizeOf(K <span class="built_in">key</span>, V value) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Clear the cache, calling &#123;@link #entryRemoved&#125; on each removed entry.</div><div class="line"> * 清空cache</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> evictAll() &#123;</div><div class="line">    trimToSize(<span class="number">-1</span>); <span class="comment">// -1 will evict 0-sized elements</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h3&gt;&lt;p&gt;通常情况下，我们为了实现更好的用户体验从而引入了缓存的概念，这在Android应用于图片列表加载上显得更为重要。我们为了让内
      
    
    </summary>
    
      <category term="Android开发进阶" scheme="https://yuxingxin.com/categories/Android%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="cache" scheme="https://yuxingxin.com/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>App研发录读后总结</title>
    <link href="https://yuxingxin.com/2015/11/19/AndroidBookNotes/"/>
    <id>https://yuxingxin.com/2015/11/19/AndroidBookNotes/</id>
    <published>2015-11-18T16:00:00.000Z</published>
    <updated>2016-01-18T08:36:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题外话"><a href="#1-题外话" class="headerlink" title="1.题外话"></a>1.题外话</h2><p>赶着双十一京东的优惠活动，买了《App研发录》这本书，看了下目录很感兴趣，就花了一周的时间看完了，这算是来写篇读后感吧，这本书整体和其他类开发的书还是有许多不同的地方，它没有系统的介绍Android的知识点，更多的是作者站在一个项目经理的角度对自己的经历所做的一个总结，所以对于项目的Team Leader来讲，这是一本很不错的书，或许你从中可以找到共鸣的地方。附上作者<a href="http://jax.cnblogs.com/" target="_blank" rel="external">博客</a></p><p><img src="/assets/images/app.jpg" alt="image"></p><h2 id="2-书中内容"><a href="#2-书中内容" class="headerlink" title="2.书中内容"></a>2.书中内容</h2><p>拿到书翻开的第一页就能看到360董事长周鸿祎做的序，当然了周董对书寄予很多，另外就是美团技术学院院长和大众点评首席架构师的作序（话说这两家公司现在合并了）。</p><h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>这个对于新手来说还是不错的内容，作者的思路很清晰，站在整个项目全局来看，从整体项目结构到内部统一规范实现。</p><h4 id="网络框架封装"><a href="#网络框架封装" class="headerlink" title="网络框架封装"></a>网络框架封装</h4><p>这个在现在看来虽然从技术上有些显得过时，尤其是Android6.0出来之后，谷歌把HttpClient从SDK包中移除了，所以这里我个人还是建议考虑当下流行的一些开源库来做，比如Volley、Retrofit、OKHttp、RxJava等，可以在此基础上做封装来适合我们的需求。但这里面还是有一些很不错的思想值得我们借鉴，尤其是提到的网络优化工作：onFail的统一处理，进度条的处理等。此外，作者提到了网络请求的缓存设计，具体思想就是：</p><ol><li>尽可能的减少API的调用次数；如页面需要调用多次才能拿到全部数据的可以设计成一个。</li><li>缓存请求到的数据；对于即时性很低的接口可以通过配置缓存时间来形成不同的缓存策略，作者也提到这种适合GET请求，不适合POST，一个是请求数据，一个是修改数据。</li><li>根据缓存时间是否过期来判断数据是否有用，最后就是加入强制更新策略。</li></ol><p>这一章还提到一个就是模拟数据，因为在App开发过程中，后端往往没有数据可供我们测试，这时候我们只能自己造数据，作者呢也实现了一个MockService，来帮助我们产生假数据，其实这个GitHub上面也有不错的开源库，关键词搜索<a href="https://github.com/search?o=desc&amp;q=Mock&amp;ref=searchresults&amp;s=stars&amp;type=Repositories&amp;utf8=%E2%9C%93" target="_blank" rel="external">Mock</a>,就会出来很多。<br>最后也提到了会话的保持，换句话说会话过期如何处理，以及时间校准问题和开启gzip压缩。</p><h4 id="Android中经典的场景设计"><a href="#Android中经典的场景设计" class="headerlink" title="Android中经典的场景设计"></a>Android中经典的场景设计</h4><p>如图片缓存设计，像这些都有不错的实现库，像Volley、UIL、picasso、Fresco、Glide等等，另外一个是对网络流量的优化，作者提到了几点：</p><ol><li>MobileAPI接口返回的数据使用gzip进行压缩。</li><li>传统App和MobileAPI即后端交互数据传递一般是走JSON,这里作者提到了谷歌发起的ProtoBuffer协议，这个协议是二进制格式的，所以在表示大数据时，空间比JSON更小。</li><li>解决频繁调用API的问题。</li><li>改变接口的连接方式；传统的都是HTTP无状态短连接，速度远不如TCP协议，因为后者是长连接，提高了速度，不过也加重服务器的负担。</li><li>建立取消网络请求的机制，如果一个页面销毁了，那么就可以让这个页面的所有请求都取消掉，因为这些是没有意义的，完全可以不再等待，也不再接受数据。</li><li>增加重试机制，针对POST增加仿重机制。</li></ol><p>针对图片的策略优化，尽可能的保证图片下载的宽高符合控件的大小，另外就是低流量模式的引入，比如可以适当降低图片的质量或者说大小，另外也可以针对2G或3G用户提供极速模式，不加载图片，只显示文字，这点最好做成配置项设计到App设置里面。另外一点就是提到App与HTML5的交互问题，为后面更新做技术铺垫。</p><p>####命名规范以及编码规范<br>从文件命名，变量命名到编码规范，代码风格统一等，这样就可以保证团队的统一性。</p><h4 id="Crash异常的收集与统计"><a href="#Crash异常的收集与统计" class="headerlink" title="Crash异常的收集与统计"></a>Crash异常的收集与统计</h4><p>我们都知道一个重要类就是UncaughtExceptionHandler类，通过实现它来做三件事情：发错误日志到服务器，给用户崩溃前的友好提示，错误日志记录SD卡。另外就是还可以使用第三方的一些服务，有很多就不在多说。我想最精彩的或许对有些人来说也最无聊的就是crash的异常分析，作者整理了他几年当中遇到的频率很高的一些异常，然后分别从语法相关、Activity相关、序列化相关、列表相关、窗体相关、资源相关、系统碎片化相关、Sqlite相关、一起其他异常等几个方面来归类和分析原因，我觉得这个也是写这本书最花时间的地方，也是我看的最过瘾的地方。</p><h4 id="ProGuard混淆及打包与渠道发布"><a href="#ProGuard混淆及打包与渠道发布" class="headerlink" title="ProGuard混淆及打包与渠道发布"></a>ProGuard混淆及打包与渠道发布</h4><p>这个无须多说，本书介绍的还是基于ant的打包方法，这里我个人还是建议开发者都切换到Android Studio上面来，尽可能的熟悉新的构建工具Gradle，以及如何使用它来打包和进行渠道发布。</p><h4 id="竞品分析"><a href="#竞品分析" class="headerlink" title="竞品分析"></a>竞品分析</h4><p>这个词还是来自产品这个领域，据说作者分析了市场上几百款App来写这一章，并且以技术的角度研究了以下几个方面：</p><ol><li>为什么他们的App体积比我们小</li><li>为什么他们的App访问速度比我们快</li><li>为什么他们的App不发版本也能上新功能</li><li>为什么他们的App基本就不怎么崩溃</li><li>为什么同样的产品，我们的价格更有优势，却竞争不过对手</li></ol><p>从HTML5页面打开速度、安装包大小、性能优化、数据采集工具、热修补、模块化拆分、版本策略等几个方面展开分析。</p><h4 id="项目管理和团队建设"><a href="#项目管理和团队建设" class="headerlink" title="项目管理和团队建设"></a>项目管理和团队建设</h4><p>作者是站在一个项目管理者的角度来谈项目开发，详细的介绍了测试团队、产品经理的职责、开发人员和项目经理的角色，以及敏捷开发的流程,大致有4类开发迭代周期：</p><ol><li>四周时间的开发流程</li><li>两周时间的开发流程</li><li>一周时间的开发流程</li><li>即时更新策略</li></ol><p>以及强调了项目经理的几个重要的工具：</p><ol><li>任务评估表</li><li>迭代阶段贴小纸条来标识项目进度，形成一个时间轴</li><li>会议纪要</li><li>开站例会</li><li>确保项目不延期</li><li>迭代风险管理</li></ol><p>于此同时，也提到了高层对这一流程的干预等不可避免的问题。最后也讲到了日常工作的一些问题的解决方法，以及无线团队的组建和管理，从面试、文档、沟通、技术分析、代码评审、Android团队leader定位、Android开发自我评测、学习路线等方面来介绍如何打造一个无线团队。</p><h2 id="3-最后"><a href="#3-最后" class="headerlink" title="3. 最后"></a>3. 最后</h2><p>总之呢这是一本很有特点的书，没有系统的知识介绍，如果你是一个项目的Team Leader ,那么我想它或许还是很适合你的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-题外话&quot;&gt;&lt;a href=&quot;#1-题外话&quot; class=&quot;headerlink&quot; title=&quot;1.题外话&quot;&gt;&lt;/a&gt;1.题外话&lt;/h2&gt;&lt;p&gt;赶着双十一京东的优惠活动，买了《App研发录》这本书，看了下目录很感兴趣，就花了一周的时间看完了，这算是来写篇读后感
      
    
    </summary>
    
      <category term="Android读书笔记" scheme="https://yuxingxin.com/categories/Android%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="notes" scheme="https://yuxingxin.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Android开发者与设计师协作之最佳实践</title>
    <link href="https://yuxingxin.com/2015/11/11/AndroidDesigner/"/>
    <id>https://yuxingxin.com/2015/11/11/AndroidDesigner/</id>
    <published>2015-11-10T16:00:00.000Z</published>
    <updated>2015-11-11T09:57:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-先介绍概念"><a href="#1-先介绍概念" class="headerlink" title="1.先介绍概念"></a>1.先介绍概念</h3><ul><li>px</li></ul><p>英文单词pixel的缩写，意为像素，屏幕上的点，我们通常所说的分辨率如720X1280就是指的像素，代表宽度有720个像素点，高度有1280个像素点。我们在网页设计中经常会出现这个单位。</p><ul><li>in</li></ul><p>表示英寸，是屏幕的物理尺寸，每英寸等于2.54厘米，通常我们所有的手机4.0寸、5.5寸都是指的这个单位，但是有一点需要说明的是，这里的尺寸指的是手机的对角线长度，如果手机的屏幕是4英寸，表示手机的屏幕（可视区域）对角线长度是4 X 2.54 = 10.16厘米。</p><ul><li>dpi/ppi</li></ul><p>Dots(pixel) Per Inch的缩写, 表示每英寸点数，即每英寸包含像素个数。比如320X480分辨率的手机，宽2英寸，高3英寸, 每英寸包含的像素点的数量为320/2=160dpi（横向）或480/3=160dpi（纵向），160就是这部手机的dpi，横向和纵向的这个值都是相同的，原因是大部分手机屏幕使用正方形的像素点。</p><ul><li>dpi/dp</li></ul><p>device independent pixels的缩写，表示设备独立像素，Android中独有的单位，在屏幕密度为160的屏幕上，1dp=1px;换句话说：1 dp ≈ 1 / 160 inch</p><ul><li>density</li></ul><p>表示上面提到屏幕密度，density = dpi/160。</p><ul><li>pt</li></ul><p>point的缩写，同样和px常用作是网页中字体的单位，在印刷行业中常用，等于1/72英寸。至于两者的区别：px是一个点，它不是自然界的长度单位，谁能说出一个“点”有多长多大么？可以画的很小，也可以很大。如果点很小，那画面就清晰，我们称它为“分辨率高”，反之，就是“分辨率低”。所以，“点”的大小是会“变”的，也称为“相对长度”。而point确切的说法是一个专用的印刷单位“磅”，大小为1/72英寸。所以它是一个自然界标准的长度单位，也称为“绝对长度”。所以也可以理解为pixel是相对大小，而point是绝对大小。两者的转换关系可以用一个公式表示：pt=px乘以3/4，大概接近1倍的关系。</p><ul><li>em</li></ul><p>即％，在CSS中，1em＝100％，是一个比率，结合CSS继承关系使用，具有灵活性。和px的转换关系为：em=16乘以px。</p><ul><li>sp</li></ul><p>Scale-independent Pixels的缩写，和dp很像，但它可以根据用户的字体偏好设置来缩放，因此，在Android开发中官方推荐我们在给字体设置大小的时候都是用sp。</p><h3 id="2-Android资源目录"><a href="#2-Android资源目录" class="headerlink" title="2.Android资源目录"></a>2.Android资源目录</h3><p>我们都知道Android工程的资源目录res有以下几个文件夹：</p><ul><li>mipmap-mdpi  dpi=160  density=1     HVGA(320x480)</li><li>mipmap-hdpi  dpi=240  density=1.5   WVGA(480X800)    FWVGA(480X854)</li><li>mipmap-xhdpi dpi=320  density=2     720p(720X1280)</li><li>mipmap-xhhdpi dpi=480  density=3    HD(1080X1920)</li><li>mipmap-xhhhdpi dpi=640  density=4   </li></ul><p>PS：</p><ul><li>VGA是”Video Graphics Array”，显示标准为640*480。</li><li>WVGA(Wide VGA)分辨率为480*800</li><li>FWVGA(Full Wide VGA)分辨率为480*854</li><li>HVGA(Half VGA)即VGA的一半分辨率为320*480；</li><li>QVGA(Quarter VGA)即VGA非四分之一分辨率为240*320</li><li>SVGA(Super VGA)即分辨率为600*800</li><li>HD(High Definition)分辨率为1080X1920,也就是我们平时说的1080p高清,720p为标清</li></ul><p>现在很多人员不足的公司都不会给Android和iOS平台都分别出一套效果图，大部分设计人员都是出一套来共用。</p><h3 id="3-最佳实践"><a href="#3-最佳实践" class="headerlink" title="3.最佳实践"></a>3.最佳实践</h3><ol><li><p>如果是Android和iOS公用一套的话，我们知道iPhone5的尺寸为4.0，分辨率为640X1164，然后根据上面的概念我们知道他的dpi大概约为332，比较接近Android的Xhdpi也即320的分辨率，所以我们完全可以按照这个dpi为320公用一套。所以我们可以在设计效果图的时候选定720X1280的分辨率来进行设计。</p></li><li><p>做设计的可能心里都有个约定俗成的规范就是尽可能的让尺寸定义为偶数，当然也可能是这么做为了好居中，Android在设计规范中也给出了几个规范，比如上面菜单栏高度（96px）、边距（16px）、图标宽高（64px）等，字体呢也都建议使用24pt，28pt，36pt 和44pt这几种。</p></li><li><p>设计完成后，设计师可以把设计的尺寸都除以2来交给开发者，然后开发者就可以用dp为单位来设置尺寸，同样的，所有字体的pt值除以2作为sp数值交给开发者，然后将图标切成上面的几种（这步可以借助一些插件来完成），同样交给开发者对应放在上面的几个文件夹中。</p></li></ol><h3 id="4-说明"><a href="#4-说明" class="headerlink" title="4.说明"></a>4.说明</h3><p>我们知道英寸是物理界的长度单位，我们最后如果都转换为它的话，那么我们所给出的尺寸就都固定了，根据上面我们知道1 dp ≈ 1 / 160 inch，很明显根据这个转换关系我们就可以把单位统一了，比方说我们知道Android中定义边距为8dp，那么它大概有8/160 inch这么宽，虽然在不同分辨率的手机上对应的像素不同，但是这个过程不需要我们关心，这是由系统自动完成的，它知道我这1dp在什么手机对应多少像素，sp也是这个道理，这样就会产生一个现象就是，在不同的手机上显示的内容多少不同，事实上也就是这样，有的手机显示8行就到底了，有的手机可以显示10行还有空白。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-先介绍概念&quot;&gt;&lt;a href=&quot;#1-先介绍概念&quot; class=&quot;headerlink&quot; title=&quot;1.先介绍概念&quot;&gt;&lt;/a&gt;1.先介绍概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;px&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;英文单词pixel的缩写，意为像素，屏幕上的点，我们通
      
    
    </summary>
    
      <category term="Android设计" scheme="https://yuxingxin.com/categories/Android%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="coordinate" scheme="https://yuxingxin.com/tags/coordinate/"/>
    
  </entry>
  
  <entry>
    <title>Android技巧之drawablePadding的那些事</title>
    <link href="https://yuxingxin.com/2015/11/05/DrawablePadding/"/>
    <id>https://yuxingxin.com/2015/11/05/DrawablePadding/</id>
    <published>2015-11-04T16:00:00.000Z</published>
    <updated>2015-11-05T07:51:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h3><p>我想很多小伙伴都和我一样应该很喜欢TextView中drawableLeft、drawableTop、drawableRight、drawableBottom这几个属性，因为我们可以直接用它来画出来一个图文排列的标签或者按钮，这样就对于用两个控件组成的相对复杂的布局来说容易的多，这在移动UI开发中很常用，但是这样经常会有个问题困扰着我，因为有时候我们想把图片和文字对应居中，这样就会出现关于图片和文字之间的间距不好控制的问题，有时候我们设置drawablePadding这个属性之后发现也并没有达到我们想要的效果。</p><p><img src="/assets/images/drawablepadding1.png" alt="image"></p><h3 id="2-原因"><a href="#2-原因" class="headerlink" title="2.原因"></a>2.原因</h3><p>大概看了下源码实现，得出的结论就是<code>android:drawablePadding</code>这个属性在 我们给view设置的宽度或者高度足够小（以至于将两者挤压在一起）的时候，这个属性才会起作用，也即在图片和文字之间会有间距产生。如果你的view所设置的宽度或者高度大于drawableLeft/drawableRight或者drawableTop/drawableBottom所产生的间距，那么这个属性当然也就不会起作用。</p><h3 id="3-实践"><a href="#3-实践" class="headerlink" title="3.实践"></a>3.实践</h3><p>一种最简单方法是我们可以直接去解决，就是通过设置view的内填充，我们从上面原因中可以知道，drawablePadding不起作用是因为view的宽度过宽，导致view内文本和图片间距过大，那我们可以通过设置paddingLeft、paddingRight、paddingTop、paddingBottom来缩写这个间距，如下代码：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"40dp"</span></div><div class="line">    android:text=<span class="string">"@string/xian_txt"</span></div><div class="line">    android:drawableRight=<span class="string">"@mipmap/ic_triangle_down"</span></div><div class="line">    android:background=<span class="string">"@android:color/transparent"</span></div><div class="line">    android:drawablePadding=<span class="string">"6dp"</span></div><div class="line">    android:gravity=<span class="string">"center"</span></div><div class="line">    android:paddingRight=<span class="string">"24dp"</span></div><div class="line">    android:paddingLeft=<span class="string">"24dp"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure><p>对应的效果也可以实现</p><p><img src="/assets/images/drawablepadding2.png" alt="image"></p><p>另外，我们也可以通过自定义View来精确的计算：</p><ol><li>我们先自定义属性iconPadding来设置间距，并提供方法给外部调用</li><li>重写setCompoundDrawablesWithIntrinsicBounds()方法来获取我们设置的drawable宽度。</li><li>最后重写onLayout方法，因为这里面改变了一些位置属性，需要通过重新布局才能起作用。</li></ol><p>相关代码：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IconButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> drawableWidth;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> iconPadding;</div><div class="line">    <span class="keyword">private</span> DrawablePosition position;</div><div class="line"></div><div class="line">    Rect bounds;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> DrawablePosition&#123;</div><div class="line">        NONE,</div><div class="line">        LEFT_AND_RIGHT,</div><div class="line">        LEFT,</div><div class="line">        RIGHT</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IconButton</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context,<span class="keyword">null</span>,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IconButton</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IconButton</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">        bounds = <span class="keyword">new</span> Rect();</div><div class="line">        applyAttributes(attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">applyAttributes</span><span class="params">(AttributeSet attrs)</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == bounds) &#123;</div><div class="line">            bounds = <span class="keyword">new</span> Rect();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        TypedArray typedArray = getContext().obtainStyledAttributes(attrs, R.styleable.IconButton);</div><div class="line">        <span class="keyword">int</span> paddingId = typedArray.getDimensionPixelSize(R.styleable.IconButton_iconPadding, <span class="number">0</span>);</div><div class="line">        setIconPadding(paddingId);</div><div class="line">        typedArray.recycle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setIconPadding</span><span class="params">(<span class="keyword">int</span> padding)</span> </span>&#123;</div><div class="line">        iconPadding = padding;</div><div class="line">        requestLayout();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</div><div class="line"></div><div class="line">        Paint textPaint = getPaint();</div><div class="line">        String text = getText().toString();</div><div class="line">        textPaint.getTextBounds(text, <span class="number">0</span>, text.length(), bounds);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> textWidth = bounds.width();</div><div class="line">        <span class="keyword">int</span> factor = (position == DrawablePosition.LEFT_AND_RIGHT) ? <span class="number">2</span> : 1;</div><div class="line">        <span class="keyword">int</span> contentWidth = drawableWidth + iconPadding * factor + textWidth;</div><div class="line">        <span class="keyword">int</span> horizontalPadding = (<span class="keyword">int</span>) ((getWidth() / <span class="number">2.0</span>) - (contentWidth / <span class="number">2.0</span>));</div><div class="line"></div><div class="line">        setCompoundDrawablePadding(-horizontalPadding + iconPadding);</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (position) &#123;</div><div class="line">            <span class="keyword">case</span> LEFT:</div><div class="line">                setPadding(horizontalPadding, getPaddingTop(), 0, getPaddingBottom());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> RIGHT:</div><div class="line">                setPadding(0, getPaddingTop(), horizontalPadding, getPaddingBottom());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> LEFT_AND_RIGHT:</div><div class="line">                setPadding(horizontalPadding, getPaddingTop(), horizontalPadding, getPaddingBottom());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                setPadding(0, getPaddingTop(), 0, getPaddingBottom());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setCompoundDrawablesWithIntrinsicBounds</span><span class="params">(Drawable left, Drawable top, Drawable right, Drawable bottom)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setCompoundDrawablesWithIntrinsicBounds(left, top, right, bottom);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (left != <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>) &#123;</div><div class="line">            drawableWidth = left.getIntrinsicWidth() + right.getIntrinsicWidth();</div><div class="line">            position = DrawablePosition.LEFT_AND_RIGHT;</div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(left != <span class="keyword">null</span>)</span> </span>&#123;</div><div class="line">            drawableWidth = left.getIntrinsicWidth();</div><div class="line">            position = DrawablePosition.LEFT;</div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(right != <span class="keyword">null</span>)</span> </span>&#123;</div><div class="line">            drawableWidth = right.getIntrinsicWidth();</div><div class="line">            position = DrawablePosition.RIGHT;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            position = DrawablePosition.NONE;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        requestLayout();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样同样可以实现我们想要的效果，并且可以自由设置间距</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;com<span class="selector-class">.yuxingxin</span><span class="selector-class">.iconview</span><span class="selector-class">.IconButton</span></div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:text=<span class="string">"@string/app_name"</span></div><div class="line">    android:gravity=<span class="string">"center"</span></div><div class="line">    android:drawableRight=<span class="string">"@mipmap/ic_triangle_down"</span></div><div class="line">    app:iconPadding=<span class="string">"6dp"</span></div><div class="line">    android:<span class="attribute">background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">    android:textColor=<span class="string">"@android:color/white"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure><p>附上<a href="https://github.com/yuxingxin/IconView" target="_blank" rel="external">demo地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-问题&quot;&gt;&lt;a href=&quot;#1-问题&quot; class=&quot;headerlink&quot; title=&quot;1.问题&quot;&gt;&lt;/a&gt;1.问题&lt;/h3&gt;&lt;p&gt;我想很多小伙伴都和我一样应该很喜欢TextView中drawableLeft、drawableTop、drawableRig
      
    
    </summary>
    
      <category term="Android技巧" scheme="https://yuxingxin.com/categories/Android%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="drawablePadding" scheme="https://yuxingxin.com/tags/drawablePadding/"/>
    
  </entry>
  
</feed>
